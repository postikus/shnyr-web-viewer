package main

import (
	"bufio"
	"database/sql"
	"flag"
	"fmt"
	"log"
	"os"
	"shnyr/internal/arduino"
	"shnyr/internal/click_manager"
	"shnyr/internal/config"
	"shnyr/internal/database"
	imageInternal "shnyr/internal/image"
	"shnyr/internal/interrupt"
	"shnyr/internal/logger"
	"shnyr/internal/ocr"
	"shnyr/internal/screenshot"
	cycleAllItems "shnyr/internal/scripts/cycle_all_items"
	cycleListedItems "shnyr/internal/scripts/cycle_listed_items"
	"strconv"
	"strings"
	"time"

	_ "github.com/go-sql-driver/mysql"
	"github.com/tarm/serial"
)

func getStartButtonFromConsole() int {
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print("üîò –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ (1-6): ")
		input, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
			continue
		}

		// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
		input = strings.TrimSpace(input)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
		if input == "" {
			fmt.Println("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6")
			continue
		}

		// –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
		buttonNum, err := strconv.Atoi(input)
		if err != nil {
			fmt.Println("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
		if buttonNum < 1 || buttonNum > 6 {
			fmt.Println("‚ùå –ù–æ–º–µ—Ä –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 6")
			continue
		}

		return buttonNum
	}
}

func getStartItemFromConsole() int {
	reader := bufio.NewReader(os.Stdin)

	for {
		fmt.Print("üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ (1 –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ): ")
		input, err := reader.ReadString('\n')
		if err != nil {
			fmt.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞:", err)
			continue
		}

		// –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
		input = strings.TrimSpace(input)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π –≤–≤–æ–¥
		if input == "" {
			fmt.Println("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –∏ –±–æ–ª—å—à–µ")
			continue
		}

		// –ü–∞—Ä—Å–∏–º —á–∏—Å–ª–æ
		itemNum, err := strconv.Atoi(input)
		if err != nil {
			fmt.Println("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
		if itemNum < 1 {
			fmt.Println("‚ùå –ù–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –∏–ª–∏ –±–æ–ª—å—à–µ")
			continue
		}

		return itemNum
	}
}

// updateStatus –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func updateStatus(db *sql.DB, status string) error {
	_, err := db.Exec("INSERT INTO status (current_status) VALUES (?)", status)
	return err
}

// addAction –¥–æ–±–∞–≤–ª—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func addAction(db *sql.DB, action string) error {
	_, err := db.Exec("INSERT INTO actions (action) VALUES (?)", action)
	return err
}

// updateLatestPendingAction –ø–æ–º–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
func updateLatestPendingAction(db *sql.DB) error {
	_, err := db.Exec("UPDATE actions SET executed = TRUE WHERE id = (SELECT id FROM actions WHERE executed = FALSE ORDER BY created_at DESC LIMIT 1)")
	return err
}

// getLatestPendingAction –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
func getLatestPendingAction(db *sql.DB) (string, error) {
	var action string
	err := db.QueryRow("SELECT action FROM actions WHERE executed = FALSE ORDER BY created_at DESC LIMIT 1").Scan(&action)
	if err != nil {
		if err == sql.ErrNoRows {
			return "", nil
		}
		return "", err
	}
	return action, nil
}

func main() {
	// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	startButtonPtr := flag.Int("start", 1, "–ù–∞—á–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (1-6)")
	startItemPtr := flag.Int("item", 1, "–ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç (1 –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–≥–æ)")
	flag.Parse()

	var startButton, startItem int

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç -start, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
	if flag.NFlag() > 0 {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
		if *startButtonPtr < 1 || *startButtonPtr > 6 {
			log.Fatal("–ù–∞—á–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 1-6")
		}
		startButton = *startButtonPtr
		startItem = *startItemPtr
	} else {
		// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
		startButton = getStartButtonFromConsole()
		startItem = getStartItemFromConsole()
	}

	// init –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	err, c := config.InitConfig()
	if err != nil {
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –ø—Ä–µ–¥–º–µ—Ç
	c.StartButtonIndex = startButton
	c.StartItemIndex = startItem

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	loggerManager, err := logger.NewLoggerManager(c.LogFilePath)
	if err != nil {
		log.Fatal("Error initializing logger: ", err)
	}
	defer loggerManager.Close()

	loggerManager.Info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –®–ù–´–†–¨")
	loggerManager.Info("üîò –ù–∞—á–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞: %d", c.StartButtonIndex)
	loggerManager.Info("üìç –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: %d", c.StartItemIndex)

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
	db, err := sql.Open("mysql", "root:root@tcp(108.181.194.102:3306)/octopus?parseTime=true")
	if err != nil {
		loggerManager.LogError(err, "Error connecting to database")
		return
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = db.Ping()
	if err != nil {
		loggerManager.LogError(err, "Error pinging database")
		return
	}
	loggerManager.Info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	err = updateStatus(db, "main")
	if err != nil {
		loggerManager.LogError(err, "Error updating status")
	}
	err = addAction(db, "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
	if err != nil {
		loggerManager.LogError(err, "Error adding action")
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–∫–µ—Ç–µ screenshot
	screenshot.SetDatabase(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	portObj, err := arduino.InitializePort(c.Port, c.BaudRate)
	if err != nil {
		loggerManager.LogError(err, "Error opening arduino port")
		return
	}
	defer func(port *serial.Port) {
		err := port.Close()
		if err != nil {
			loggerManager.LogError(err, "Error closing port")
		}
	}(portObj)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ—Ä—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥
	c.PortObj = portObj

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤
	windowInitializer := imageInternal.NewWindowInitializer(c.WindowTopOffset)
	marginX, marginY, err := windowInitializer.GetItemBrokerWindowMargins()
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞")
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
	screenshotManager := screenshot.NewScreenshotManager(marginX, marginY)
	dbManager := database.NewDatabaseManager(db, loggerManager)
	ocrManager := ocr.NewOCRManager(&c)
	clickManager := click_manager.NewClickManager(portObj, &c, marginX, marginY, screenshotManager, dbManager, loggerManager)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
	interruptManager := interrupt.NewInterruptManager(loggerManager)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è dbManager)
	defer func() {
		err = dbManager.UpdateStatus("stopped")
		if err != nil {
			loggerManager.LogError(err, "Error updating status to stopped on exit")
		}
		err = addAction(db, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		if err != nil {
			loggerManager.LogError(err, "Error adding exit action")
		}
		loggerManager.Info("üõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	}()

	loggerManager.Info("‚è∏Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
	loggerManager.Info("üî• –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Ctrl+Shift+1 –¥–ª—è cycle_all_items, Ctrl+Shift+2 –¥–ª—è cycle_listed_items, Q –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "ready"
	err = updateStatus(db, "ready")
	if err != nil {
		loggerManager.LogError(err, "Error updating status to ready")
	}
	err = addAction(db, "–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
	if err != nil {
		loggerManager.LogError(err, "Error adding ready action")
	}

	// –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
	interruptManager.StartMonitoring()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
	go func() {
		for {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
			time.Sleep(5 * time.Second)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ —Å–∫—Ä–∏–ø—Ç
			if interruptManager.IsScriptRunning() {
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
			latestPendingAction, err := getLatestPendingAction(db)
			if err != nil {
				loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
				continue
			}

			if latestPendingAction == "start" {
				loggerManager.Info("üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ 'start', –∑–∞–ø—É—Å–∫–∞–µ–º cycle_listed_items")

				// –ü–æ–º–µ—á–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
				err = updateLatestPendingAction(db)
				if err != nil {
					loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
				}

				// –ó–∞–ø—É—Å–∫–∞–µ–º cycle_listed_items
				err = dbManager.UpdateStatus("cycle_listed_items")
				if err != nil {
					loggerManager.LogError(err, "Error updating status to cycle_listed_items")
				}
				err = addAction(db, "–ó–∞–ø—É—Å–∫ cycle_listed_items (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π)")
				if err != nil {
					loggerManager.LogError(err, "Error adding cycle_listed_items action")
				}

				// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cycle_listed_items
				scriptDoneChan := make(chan bool, 1)
				interruptManager.SetScriptRunning(true)

				// –ó–∞–ø—É—Å–∫–∞–µ–º cycle_listed_items –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
				go func() {
					defer func() {
						// –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏) –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
						if interruptManager.IsInterrupted() {
							err = dbManager.UpdateStatus("stopped")
							if err != nil {
								loggerManager.LogError(err, "Error updating status to stopped")
							}
							err = updateLatestPendingAction(db)
							if err != nil {
								loggerManager.LogError(err, "Error updating latest pending action")
							}
							err = addAction(db, "cycle_listed_items –ø—Ä–µ—Ä–≤–∞–Ω")
							if err != nil {
								loggerManager.LogError(err, "Error adding interruption action")
							}
						} else {
							err = dbManager.UpdateStatus("ready")
							if err != nil {
								loggerManager.LogError(err, "Error updating status to ready")
							}
							err = updateLatestPendingAction(db)
							if err != nil {
								loggerManager.LogError(err, "Error updating latest pending action")
							}
							err = addAction(db, "cycle_listed_items –∑–∞–≤–µ—Ä—à–µ–Ω")
							if err != nil {
								loggerManager.LogError(err, "Error adding completion action")
							}
						}
						scriptDoneChan <- true
					}()

					cycleListedItems.Run(&c, screenshotManager, dbManager, ocrManager, clickManager, loggerManager, interruptManager)
				}()

				// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cycle_listed_items
				<-scriptDoneChan
				interruptManager.SetScriptRunning(false)
				loggerManager.Info("‚úÖ cycle_listed_items –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+2 –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
			}
		}
	}()

	for range interruptManager.GetScriptStartChan() {
		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
		interruptManager.SetInterrupted(false)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∫—Ä–∏–ø—Ç–∞
		currentStatus, err := dbManager.GetCurrentStatus()
		if err != nil {
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞")
			continue
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "stopped", "ready" –∏–ª–∏ "main"
		if currentStatus != "stopped" && currentStatus != "ready" && currentStatus != "main" {
			loggerManager.Info("‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: %s. –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: stopped, ready –∏–ª–∏ main", currentStatus)
			continue
		}

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ —Ç–∏–ø—É —Å–∏–≥–Ω–∞–ª–∞
		scriptType := interruptManager.GetLastScriptType()

		switch scriptType {
		case "cycle_all_items":
			loggerManager.Info("üöÄ –ó–∞–ø—É—Å–∫ cycle_all_items...")
			loggerManager.Info("üí° –î–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Q (—Ä–∞–±–æ—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ)")

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
			err = dbManager.UpdateStatus("cycle_all_items")
			if err != nil {
				loggerManager.LogError(err, "Error updating status to cycle_all_items")
			}
			err = addAction(db, "–ó–∞–ø—É—Å–∫ cycle_all_items")
			if err != nil {
				loggerManager.LogError(err, "Error adding cycle_all_items action")
			}

			// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cycle_all_items
			scriptDoneChan := make(chan bool, 1)
			interruptManager.SetScriptRunning(true)

			// –ó–∞–ø—É—Å–∫–∞–µ–º cycle_all_items –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
			go func() {
				defer func() {
					// –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏) –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
					if interruptManager.IsInterrupted() {
						err = dbManager.UpdateStatus("stopped")
						if err != nil {
							loggerManager.LogError(err, "Error updating status to stopped")
						}
						err = updateLatestPendingAction(db)
						if err != nil {
							loggerManager.LogError(err, "Error updating latest pending action")
						}
						err = addAction(db, "cycle_all_items –ø—Ä–µ—Ä–≤–∞–Ω")
						if err != nil {
							loggerManager.LogError(err, "Error adding interruption action")
						}
					} else {
						err = dbManager.UpdateStatus("ready")
						if err != nil {
							loggerManager.LogError(err, "Error updating status to ready")
						}
						err = updateLatestPendingAction(db)
						if err != nil {
							loggerManager.LogError(err, "Error updating latest pending action")
						}
						err = addAction(db, "cycle_all_items –∑–∞–≤–µ—Ä—à–µ–Ω")
						if err != nil {
							loggerManager.LogError(err, "Error adding completion action")
						}
					}
					scriptDoneChan <- true
				}()

				cycleAllItems.Run(&c, screenshotManager, dbManager, ocrManager, clickManager, loggerManager, interruptManager)
			}()

			// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cycle_all_items
			<-scriptDoneChan
			interruptManager.SetScriptRunning(false)
			loggerManager.Info("‚úÖ cycle_all_items –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+1 –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")

		case "cycle_listed_items":
			loggerManager.Info("üöÄ –ó–∞–ø—É—Å–∫ cycle_listed_items...")
			loggerManager.Info("üí° –î–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Q (—Ä–∞–±–æ—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ)")

			// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
			err = dbManager.UpdateStatus("cycle_listed_items")
			if err != nil {
				loggerManager.LogError(err, "Error updating status to cycle_listed_items")
			}
			err = addAction(db, "–ó–∞–ø—É—Å–∫ cycle_listed_items")
			if err != nil {
				loggerManager.LogError(err, "Error adding cycle_listed_items action")
			}

			// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cycle_listed_items
			scriptDoneChan := make(chan bool, 1)
			interruptManager.SetScriptRunning(true)

			// –ó–∞–ø—É—Å–∫–∞–µ–º cycle_listed_items –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
			go func() {
				defer func() {
					// –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –∏–ª–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏) –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
					if interruptManager.IsInterrupted() {
						err = dbManager.UpdateStatus("stopped")
						if err != nil {
							loggerManager.LogError(err, "Error updating status to stopped")
						}
						err = updateLatestPendingAction(db)
						if err != nil {
							loggerManager.LogError(err, "Error updating latest pending action")
						}
						err = addAction(db, "cycle_listed_items –ø—Ä–µ—Ä–≤–∞–Ω")
						if err != nil {
							loggerManager.LogError(err, "Error adding interruption action")
						}
					} else {
						err = dbManager.UpdateStatus("ready")
						if err != nil {
							loggerManager.LogError(err, "Error updating status to ready")
						}
						err = updateLatestPendingAction(db)
						if err != nil {
							loggerManager.LogError(err, "Error updating latest pending action")
						}
						err = addAction(db, "cycle_listed_items –∑–∞–≤–µ—Ä—à–µ–Ω")
						if err != nil {
							loggerManager.LogError(err, "Error adding completion action")
						}
					}
					scriptDoneChan <- true
				}()

				cycleListedItems.Run(&c, screenshotManager, dbManager, ocrManager, clickManager, loggerManager, interruptManager)
			}()

			// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è cycle_listed_items
			<-scriptDoneChan
			interruptManager.SetScriptRunning(false)
			loggerManager.Info("‚úÖ cycle_listed_items –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+Shift+2 –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
		}
	}
}
