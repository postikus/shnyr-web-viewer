package main

import (
	"database/sql"
	"log"
	"shnyr/internal/arduino"
	"shnyr/internal/click_manager"
	"shnyr/internal/config"
	"shnyr/internal/database"
	imageInternal "shnyr/internal/image"
	"shnyr/internal/logger"
	"shnyr/internal/ocr"
	"shnyr/internal/screenshot"
	script1 "shnyr/internal/scripts/script1"

	_ "github.com/go-sql-driver/mysql"
	"github.com/moutend/go-hook/pkg/keyboard"
	"github.com/moutend/go-hook/pkg/types"
	"github.com/tarm/serial"
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
func monitorHotkeys(scriptInterruptChan chan<- bool, scriptStartChan chan<- bool, isScriptRunning *bool) {
	eventChan := make(chan types.KeyboardEvent, 100)
	go keyboard.Install(nil, eventChan)
	defer keyboard.Uninstall()

	shiftPressed := false

	for event := range eventChan {
		if event.Message == types.WM_KEYDOWN && (event.VKCode == types.VK_LSHIFT || event.VKCode == types.VK_RSHIFT) {
			shiftPressed = true
		}
		if event.Message == types.WM_KEYUP && (event.VKCode == types.VK_LSHIFT || event.VKCode == types.VK_RSHIFT) {
			shiftPressed = false
		}
		if event.Message == types.WM_KEYDOWN && event.VKCode == types.VK_RETURN && shiftPressed {
			scriptStartChan <- true
		}
		if event.Message == types.WM_KEYDOWN && (event.VKCode == types.VK_Q || event.VKCode == types.VK_CAPITAL) {
			// Q –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç script1, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
			if isScriptRunning != nil && *isScriptRunning {
				scriptInterruptChan <- true
			}
		}
	}
}

func main() {
	// init –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	err, c := config.InitConfig()
	if err != nil {
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
	loggerManager, err := logger.NewLoggerManager(c.LogFilePath)
	if err != nil {
		log.Fatal("Error initializing logger: ", err)
	}
	defer loggerManager.Close()

	loggerManager.Info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –®–ù–´–†–¨")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö MySQL
	db, err := sql.Open("mysql", "root:root@tcp(108.181.194.102:3306)/octopus?parseTime=true")
	if err != nil {
		loggerManager.LogError(err, "Error connecting to database")
		return
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = db.Ping()
	if err != nil {
		loggerManager.LogError(err, "Error pinging database")
		return
	}
	loggerManager.Info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–∫–µ—Ç–µ screenshot
	screenshot.SetDatabase(db)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	portObj, err := arduino.InitializePort(c.Port, c.BaudRate)
	if err != nil {
		loggerManager.LogError(err, "Error opening arduino port")
		return
	}
	defer func(port *serial.Port) {
		err := port.Close()
		if err != nil {
			loggerManager.LogError(err, "Error closing port")
		}
	}(portObj)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤
	windowInitializer := imageInternal.NewWindowInitializer(c.WindowTopOffset)
	marginX, marginY, err := windowInitializer.GetItemBrokerWindowMargins()
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞")
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
	screenshotManager := screenshot.NewScreenshotManager(marginX, marginY)
	dbManager := database.NewDatabaseManager(db, loggerManager)
	ocrManager := ocr.NewOCRManager(&c)
	clickManager := click_manager.NewClickManager(portObj, &c, marginX, marginY, screenshotManager, dbManager, loggerManager)

	loggerManager.Info("‚è∏Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ Shift+Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ script1, Q –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
	loggerManager.Info("üî• –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Shift+Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞, Q –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è script1")

	// –ö–∞–Ω–∞–ª—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
	scriptInterruptChan := make(chan bool, 1) // –ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ script1
	scriptStartChan := make(chan bool, 1)

	isScriptRunning := false
	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go monitorHotkeys(scriptInterruptChan, scriptStartChan, &isScriptRunning)

	for {
		select {
		case <-scriptStartChan:
			loggerManager.Info("üöÄ –ó–∞–ø—É—Å–∫ script1...")
			loggerManager.Info("üí° –î–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ Q (—Ä–∞–±–æ—Ç–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ)")

			// –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è script1
			scriptDoneChan := make(chan bool, 1)
			isScriptRunning = true

			// –ó–∞–ø—É—Å–∫–∞–µ–º script1 –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
			go func() {
				script1.Run(&c, screenshotManager, dbManager, ocrManager, clickManager, marginX, marginY, loggerManager, scriptInterruptChan)
				scriptDoneChan <- true
			}()

			// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è script1
			<-scriptDoneChan
			isScriptRunning = false
			loggerManager.Info("‚úÖ script1 –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Shift+Enter –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
		}
	}
}
