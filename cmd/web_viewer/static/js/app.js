function openImageModal(imageData, id, info, hasItems, ...items) {
	const modal = document.getElementById('imageModal');
	const modalImage = document.getElementById('modalImage');
	const modalTitle = document.getElementById('modalTitle');
	const modalInfo = document.getElementById('modalInfo');
	const modalStructuredData = document.getElementById('modalStructuredData');
	
	modalImage.src = 'data:image/png;base64,' + imageData;
	modalTitle.textContent = '–®–ù–´–†–¨ –ù–ê–ú–£–¢–ò–õ –°–ö–†–ò–ù–®–û–¢ #' + id;
	modalInfo.textContent = info;
	
	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if (hasItems && items.length > 0) {
		// –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —É–ª—É—á—à–µ–Ω–∏—è
		const enhancementGroups = {};
		items.forEach(item => {
			if (item.enhancement && item.price) {
				const price = parseFloat(item.price.replace(/[^\d.]/g, ''));
				if (!isNaN(price)) {
					if (!enhancementGroups[item.enhancement]) {
						enhancementGroups[item.enhancement] = [];
					}
					enhancementGroups[item.enhancement].push({...item, priceValue: price});
				}
			}
		});
		
		// –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
		const cheapestItems = new Set();
		Object.values(enhancementGroups).forEach(group => {
			if (group.length > 0) {
				const cheapest = group.reduce((min, item) => 
					item.priceValue < min.priceValue ? item : min
				);
				cheapestItems.add(cheapest);
			}
		});
		
		let tableHTML = '<h4 style="margin: 0 0 10px 0; color: #333; font-size: 1.1em;">üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</h4>';
		tableHTML += '<table class="modal-structured-table">';
		tableHTML += '<tr><th>Title</th><th>Title Short</th><th>Enhancement</th><th>Price</th><th>Count</th><th>Package</th><th>Owner</th><th>Category</th></tr>';
		
		items.forEach(item => {
			const isCheapest = cheapestItems.has(item);
			const rowClass = isCheapest ? 'cheapest-item' : '';
			tableHTML += '<tr class="' + rowClass + '">';
			tableHTML += '<td>' + (item.title || '') + '</td>';
			tableHTML += '<td>' + (item.titleShort || '') + '</td>';
			tableHTML += '<td>' + (item.enhancement || '') + '</td>';
			tableHTML += '<td>' + formatPrice(item.price || '') + '</td>';
			tableHTML += '<td>' + (item.count || '') + '</td>';
			tableHTML += '<td>' + (item.package ? '‚úîÔ∏è' : '') + '</td>';
			tableHTML += '<td>' + (item.owner || '') + '</td>';
			tableHTML += '<td>' + formatCategory(item.category || '') + '</td>';
			tableHTML += '</tr>';
		});
		
		tableHTML += '</table>';
		modalStructuredData.innerHTML = tableHTML;
		modalStructuredData.style.display = 'block';
	} else {
		modalStructuredData.innerHTML = '<p style="margin: 0; color: #666; font-style: italic;">–ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>';
		modalStructuredData.style.display = 'block';
	}
	
	modal.style.display = 'block';
	document.body.style.overflow = 'hidden'; // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

function closeImageModal() {
	const modal = document.getElementById('imageModal');
	modal.style.display = 'none';
	document.body.style.overflow = 'auto'; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
}

function openDetailModalFromData(element) {
	const rawText = element.getAttribute('data-raw-text');
	const id = element.getAttribute('data-id');
	const imageData = element.getAttribute('data-image');
	const imagePath = element.getAttribute('data-image-path');
	const debugInfo = element.getAttribute('data-debug');
	const hasItems = element.getAttribute('data-items') === 'true';
	const structuredItemsJson = element.getAttribute('data-structured-items');
	
	console.log('openDetailModalFromData called with:', {rawText, id, imageData, imagePath, debugInfo, hasItems, structuredItemsJson});
	
	let items = [];
	if (hasItems && structuredItemsJson) {
		try {
			items = JSON.parse(structuredItemsJson);
			console.log('Parsed items:', items);
		} catch (e) {
			console.error('Error parsing structured items:', e);
			items = [];
		}
	}
	
	openDetailModal(rawText, id, imageData, imagePath, debugInfo, hasItems, ...items);
}

function openDetailModal(text, id, imageData, imagePath, debugInfo, hasItems, ...items) {
	console.log('openDetailModal called with:', {text, id, imageData, imagePath, debugInfo, hasItems, items});
	
	const modalTitle = document.getElementById('detailModalTitle');
	const modalImage = document.getElementById('detailModalImage');
	const modalDebugInfo = document.getElementById('detailModalDebugInfo');
	const modalStructuredData = document.getElementById('detailModalStructuredData');
	const modalRawText = document.getElementById('detailModalRawText');
	const modalImagePath = document.getElementById('detailModalImagePath');
	
	console.log('Found elements:', {
		modalTitle: !!modalTitle,
		modalImage: !!modalImage,
		modalDebugInfo: !!modalDebugInfo,
		modalStructuredData: !!modalStructuredData,
		modalRawText: !!modalRawText,
		modalImagePath: !!modalImagePath
	});
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
	modalTitle.textContent = '–®–ù–´–†–¨ –ù–ê–ú–£–¢–ò–õ –°–ö–†–ò–ù–®–û–¢ #' + id;
	
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	if (imageData && imageData !== '') {
		modalImage.src = 'data:image/png;base64,' + imageData;
		modalImage.style.display = 'block';
		console.log('Image src set to:', modalImage.src.substring(0, 50) + '...');
	} else {
		modalImage.style.display = 'none';
	}
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º debug info
	modalDebugInfo.textContent = debugInfo || '–ù–µ—Ç debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç
	modalRawText.textContent = text || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
	
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
	modalImagePath.textContent = imagePath || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
	
	console.log('hasItems:', hasItems, 'items length:', items.length);
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if (hasItems && items.length > 0) {
		console.log('Processing items:', items);
		const cheapestItems = new Set();
		
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –∏ package
		const enhancementGroups = {};
		items.forEach(item => {
			const enhancement = item.enhancement || '';
			const isPackage = item.package || false;
			const groupKey = enhancement + '_' + (isPackage ? 'package' : 'nopackage');
			
			if (!enhancementGroups[groupKey]) {
				enhancementGroups[groupKey] = [];
			}
			enhancementGroups[groupKey].push(item);
		});
		
		// –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
		Object.values(enhancementGroups).forEach(group => {
			if (group.length > 0) {
				const cheapest = group.reduce((min, item) => {
					const priceValue = parseFloat((item.price || '0').replace(/[^\d.]/g, ''));
					const minPriceValue = parseFloat((min.price || '0').replace(/[^\d.]/g, ''));
					return priceValue < minPriceValue ? item : min;
				});
				cheapestItems.add(cheapest);
			}
		});
		
		let tableHTML = '<table class="structured-table">';
		tableHTML += '<thead><tr><th>–ù–∞–∑–≤–∞–Ω–∏–µ</th><th>–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</th><th>–£–ª—É—á—à–µ–Ω–∏–µ</th><th>–¶–µ–Ω–∞</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th><th>–ü–∞–∫–µ—Ç</th><th>–í–ª–∞–¥–µ–ª–µ—Ü</th><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th></tr></thead>';
		tableHTML += '<tbody>';
		
		items.forEach(item => {
			const isCheapest = cheapestItems.has(item);
			const rowClass = isCheapest ? (item.package ? 'cheapest-package' : 'cheapest') : '';
			tableHTML += '<tr class="' + rowClass + '">';
			tableHTML += '<td>' + (item.title || '') + '</td>';
			tableHTML += '<td>' + (item.titleShort || '') + '</td>';
			tableHTML += '<td>' + (item.enhancement || '') + '</td>';
			tableHTML += '<td>' + formatPrice(item.price || '') + '</td>';
			tableHTML += '<td>' + (item.count || '') + '</td>';
			tableHTML += '<td>' + (item.package ? '‚úîÔ∏è' : '‚ùå') + '</td>';
			tableHTML += '<td>' + (item.owner || '') + '</td>';
			tableHTML += '<td>' + formatCategory(item.category || '') + '</td>';
			tableHTML += '</tr>';
		});
		
		tableHTML += '</tbody></table>';
		console.log('Generated table HTML:', tableHTML);
		modalStructuredData.innerHTML = tableHTML;
		console.log('Table HTML set to modalStructuredData');
	} else {
		console.log('No items to display');
		modalStructuredData.innerHTML = '<p>–ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>';
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
	const detailModal = document.getElementById('detailModal');
	detailModal.style.display = 'block';
	document.body.style.overflow = 'hidden';
	console.log('Modal displayed');
}

function closeDetailModal() {
	const detailModal = document.getElementById('detailModal');
	detailModal.style.display = 'none';
	document.body.style.overflow = 'auto';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
function formatPrice(price) {
	if (!price) return '';
	// –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
	const cleanPrice = price.replace(/[^\d.]/g, '');
	if (!cleanPrice) return price;
	
	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∫–∞–∂–¥—ã–µ 3 —Ü–∏—Ñ—Ä—ã —Å–ø—Ä–∞–≤–∞
	let result = '';
	for (let i = 0; i < cleanPrice.length; i++) {
		if (i > 0 && (cleanPrice.length - i) % 3 === 0) {
			result += ' ';
		}
		result += cleanPrice[i];
	}
	return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function formatCategory(category) {
	if (!category) return '';
	
	switch (category) {
		case 'buy_consumables':
			return 'üí∞ –°–∫—É–ø–∫–∞ (—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏)';
		case 'buy_equipment':
			return 'üí∞ –°–∫—É–ø–∫–∞ (—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞)';
		case 'sell_consumables':
			return 'üí∏ –ü—Ä–æ–¥–∞–∂–∞ (—Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏)';
		case 'sell_equipment':
			return 'üí∏ –ü—Ä–æ–¥–∞–∂–∞ (—ç–∫–∏–ø–∏—Ä–æ–≤–∫–∞)';
		case 'unknown':
			return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
		default:
			return category;
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å–∞–º—ã—Ö –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
function highlightCheapestItems() {
	console.log('highlightCheapestItems called');
	const structuredTables = document.querySelectorAll('.structured-table table');
	console.log('Found structured tables:', structuredTables.length);
	
	structuredTables.forEach(function(table, tableIndex) {
		console.log('Processing table ' + tableIndex);
		const rows = table.querySelectorAll('tr:not(:first-child)'); // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
		console.log('Found ' + rows.length + ' data rows');
		const enhancementGroups = {};
		
		// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—é —É–ª—É—á—à–µ–Ω–∏—è –∏ package
		rows.forEach(function(row, rowIndex) {
			const cells = row.querySelectorAll('td');
			if (cells.length >= 7) { // –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —É—á–µ—Ç–∞ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
				const enhancement = cells[2].textContent.trim();
				const price = cells[3].textContent.trim();
				const package = cells[5].textContent.trim();
				const priceValue = parseFloat(price.replace(/[^\d]/g, ''));
				
				console.log('Row ' + rowIndex + ': enhancement="' + enhancement + '", price="' + price + '", package="' + package + '", priceValue=' + priceValue);
				
				if (enhancement && !isNaN(priceValue)) {
					// –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –≥—Ä—É–ø–ø—ã: enhancement + package
					const groupKey = enhancement + '_' + (package.includes('‚úîÔ∏è') ? 'package' : 'nopackage');
					if (!enhancementGroups[groupKey]) {
						enhancementGroups[groupKey] = [];
					}
					enhancementGroups[groupKey].push({
						row: row, 
						priceValue: priceValue, 
						isPackage: package.includes('‚úîÔ∏è')
					});
				}
			}
		});
		
		console.log('Enhancement groups:', enhancementGroups);
		
		// –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–¥–µ–ª—è–µ–º —Å–∞–º—ã–µ –¥–µ—à–µ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø–µ
		Object.keys(enhancementGroups).forEach(function(groupKey) {
			const group = enhancementGroups[groupKey];
			console.log('Processing group ' + groupKey + ' with ' + group.length + ' items');
			if (group.length > 0) {
				const cheapest = group.reduce(function(min, item) {
					return item.priceValue < min.priceValue ? item : min;
				});
				console.log('Cheapest in group ' + groupKey + ': price=' + cheapest.priceValue + ', isPackage=' + cheapest.isPackage);
				
				// –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç package
				if (cheapest.isPackage) {
					cheapest.row.classList.add('cheapest-package');
				} else {
					cheapest.row.classList.add('cheapest');
				}
			}
		});
	});
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–µ—à–µ–≤—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	highlightCheapestItems();
	
	// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	document.getElementById('imageModal').addEventListener('click', function(e) {
		if (e.target === this) {
			closeImageModal();
		}
	});
	
	// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∞–≤–∏—à–µ Escape
	document.addEventListener('keydown', function(e) {
		if (e.key === 'Escape') {
			closeImageModal();
			closeDetailModal();
		}
	});
	
	// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
	document.getElementById('detailModal').addEventListener('click', function(e) {
		if (e.target === this) {
			closeDetailModal();
		}
	});
});

function formatDateTime(dateTimeStr) {
	const date = new Date(dateTimeStr);
	// –î–æ–±–∞–≤–ª—è–µ–º 8 —á–∞—Å–æ–≤ (UTC+8)
	date.setHours(date.getHours() + 8);
	
	const day = String(date.getDate()).padStart(2, '0');
	const month = String(date.getMonth() + 1).padStart(2, '0');
	const year = date.getFullYear();
	const hours = String(date.getHours()).padStart(2, '0');
	const minutes = String(date.getMinutes()).padStart(2, '0');
	const seconds = String(date.getSeconds()).padStart(2, '0');
	
	return `${day}.${month}.${year} ${hours}:${minutes}:${seconds}`;
}

function sendAction(action) {
	console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ:', action);
	
	fetch('/' + action, {
		method: 'POST',
		headers: {
			'Content-Type': 'application/json',
		}
	})
	.then(response => {
		if (response.ok) {
			console.log('–î–µ–π—Å—Ç–≤–∏–µ', action, '—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
			// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É, –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			setTimeout(() => {
				// –í—ã–∑—ã–≤–∞–µ–º updateStatus –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
				if (typeof updateStatus === 'function') {
					updateStatus();
				}
			}, 1000);
		} else {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏—è:', response.status);
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: ' + response.status);
		}
	})
	.catch(error => {
		console.error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error);
		alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏—è');
	});
} 