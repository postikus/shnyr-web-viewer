package database

import (
	"database/sql"
	"fmt"
	"log"
	"octopus/internal/config"
	"octopus/internal/helpers"
)

// DatabaseManager —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
type DatabaseManager struct {
	db *sql.DB
}

// NewDatabaseManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager
func NewDatabaseManager(db *sql.DB) *DatabaseManager {
	return &DatabaseManager{
		db: db,
	}
}

// SaveOCRResultToDB —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func (h *DatabaseManager) SaveOCRResultToDB(imagePath, ocrResult string, debugInfo, jsonData string, rawText string, imageData []byte, cfg *config.Config) (int, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
	if cfg.SaveToDB != 1 {
		log.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–æ (save_to_db = %d)", cfg.SaveToDB)
		return 0, nil
	}

	log.Printf("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î...")
	log.Printf("üìÑ JSON –¥–∞–Ω–Ω—ã–µ (–¥–ª–∏–Ω–∞: %d): %s", len(jsonData), jsonData)
	log.Printf("üîç Debug info (–¥–ª–∏–Ω–∞: %d): %s", len(debugInfo), debugInfo[:helpers.Min(100, len(debugInfo))])
	log.Printf("üìù Raw text (–¥–ª–∏–Ω–∞: %d): %s", len(rawText), rawText[:helpers.Min(100, len(rawText))])

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS ocr_results (
		id INT AUTO_INCREMENT PRIMARY KEY,
		image_path VARCHAR(255) NOT NULL,
		image_data LONGBLOB,
		ocr_text LONGTEXT,
		debug_info LONGTEXT,
		json_data LONGTEXT,
		raw_text LONGTEXT,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	)`

	_, err := h.db.Exec(createTableSQL)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	insertSQL := `INSERT INTO ocr_results (image_path, image_data, ocr_text, debug_info, json_data, raw_text) VALUES (?, ?, ?, ?, ?, ?)`
	result, err := h.db.Exec(insertSQL, imagePath, imageData, ocrResult, debugInfo, jsonData, rawText)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
	ocrResultID, err := result.LastInsertId()
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø–∏—Å–∏: %v", err)
	}

	log.Printf("‚úÖ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: %d", ocrResultID)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if jsonData != "" {
		log.Printf("üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è OCR ID: %d", ocrResultID)
		err = SaveStructuredDataBatch(h.db, int(ocrResultID), jsonData)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
		} else {
			log.Printf("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
		}
	} else {
		log.Printf("‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ structured items")
	}

	log.Printf("OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–ª–∞: %s (ID: %d)", imagePath, ocrResultID)
	return int(ocrResultID), nil
}
