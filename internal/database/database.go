package database

import (
	"bufio"
	"database/sql"
	"fmt"
	"os"
	"shnyr/internal/config"
	"shnyr/internal/logger"
	"strconv"
	"strings"
	"sync"
)

// DatabaseManager —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
type DatabaseManager struct {
	db     *sql.DB
	logger *logger.LoggerManager
	wg     sync.WaitGroup // –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
}

// NewDatabaseManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager
func NewDatabaseManager(db *sql.DB, loggerManager *logger.LoggerManager) *DatabaseManager {
	return &DatabaseManager{
		db:     db,
		logger: loggerManager,
	}
}

// SaveOCRResultToDB —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func (h *DatabaseManager) SaveOCRResultToDB(imagePath, ocrResult string, debugInfo, jsonData string, rawText string, imageData []byte, cfg *config.Config, itemCategory string, currentItemName string) (int, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
	if cfg.SaveToDB != 1 {
		h.logger.Info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–æ (save_to_db = %d)", cfg.SaveToDB)
		return 0, nil
	}
	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS ocr_results (
		id INT AUTO_INCREMENT PRIMARY KEY,
		image_path VARCHAR(255) NOT NULL,
		image_data LONGBLOB,
		ocr_text LONGTEXT,
		debug_info LONGTEXT,
		json_data LONGTEXT,
		raw_text LONGTEXT,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	)`

	_, err := h.db.Exec(createTableSQL)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	insertSQL := `INSERT INTO ocr_results (image_path, image_data, ocr_text, debug_info, json_data, raw_text) VALUES (?, ?, ?, ?, ?, ?)`
	result, err := h.db.Exec(insertSQL, imagePath, imageData, ocrResult, debugInfo, jsonData, rawText)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
	ocrResultID, err := result.LastInsertId()
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø–∏—Å–∏: %v", err)
	}

	h.logger.Info("‚úÖ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: %d", ocrResultID)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
	if jsonData != "" {
		h.logger.Info("üîß –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è OCR ID: %d", ocrResultID)

		// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
		h.wg.Add(1)
		go func(ocrID int, jsonStr string) {
			defer h.wg.Done()
			err := SaveStructuredDataBatch(h.db, ocrID, jsonStr, itemCategory, currentItemName)
			if err != nil {
				h.logger.LogError(err, "–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
			} else {
				h.logger.Info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–ª—è OCR ID: %d", ocrID)
			}
		}(int(ocrResultID), jsonData)
	} else {
		h.logger.Info("‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ structured items")
	}

	h.logger.Info("OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–ª–∞: %s (ID: %d)", imagePath, ocrResultID)
	return int(ocrResultID), nil
}

// WaitForAsyncOperations –æ–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
func (h *DatabaseManager) WaitForAsyncOperations() {
	h.logger.Info("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
	h.wg.Wait()
	h.logger.Info("‚úÖ –í—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
}

// InitializeItemsTable —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ—ë –∏–∑ —Ñ–∞–π–ª–∞
func (h *DatabaseManager) InitializeItemsTable() error {
	h.logger.Info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤...")

	// –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
	err := h.RecreateItemsTable()
	if err != nil {
		return err
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
	err = h.loadItemsFromFile("items.txt")
	if err != nil {
		return err
	}

	h.logger.Info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// loadItemsFromFile –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
func (h *DatabaseManager) loadItemsFromFile(filename string) error {
	file, err := os.Open(filename)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)

	// –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	tx, err := h.db.Begin()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}
	defer tx.Rollback()

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
	stmt, err := tx.Prepare("INSERT IGNORE INTO items_list (name, category, min_price) VALUES (?, ?, ?)")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err)
	}
	defer stmt.Close()

	lineNumber := 0
	currentCategory := "buy_consumables" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –ø–æ–∫—É–ø–∫–∞ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
	buyConsumablesCount := 0
	buyEquipmentCount := 0
	sellConsumablesCount := 0
	sellEquipmentCount := 0

	for scanner.Scan() {
		lineNumber++
		line := strings.TrimSpace(scanner.Text())

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
		if line == "" || strings.HasPrefix(line, "#") {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
		switch line {
		case "---":
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π
			switch currentCategory {
			case "buy_consumables":
				currentCategory = "buy_equipment"
			case "buy_equipment":
				// –ü–æ—Å–ª–µ buy_equipment –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ sell_consumables
				currentCategory = "sell_consumables"
			case "sell_consumables":
				currentCategory = "sell_equipment"
			case "sell_equipment":
				// –ï—Å–ª–∏ —É–∂–µ –≤ sell_equipment, –æ—Å—Ç–∞–µ–º—Å—è —Ç–∞–º
				currentCategory = "sell_equipment"
			default:
				// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ buy_equipment
				currentCategory = "buy_equipment"
			}
			h.logger.Info("üìã –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %s", currentCategory)
			continue
		case "===":
			// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ sell_consumables
			currentCategory = "sell_consumables"
			h.logger.Info("üìã –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: %s", currentCategory)
			h.logger.Info("üîç DEBUG: –ù–∞–π–¥–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ===, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ sell_consumables")
			continue
		}

		// –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–Ω–∞–∑–≤–∞–Ω–∏–µ:—Ü–µ–Ω–∞"
		parts := strings.Split(line, ":")
		itemName := strings.TrimSpace(parts[0])
		var minPrice float64 = 0

		if len(parts) > 1 {
			priceStr := strings.TrimSpace(parts[1])
			if priceStr != "" {
				if price, err := strconv.ParseFloat(priceStr, 64); err == nil {
					minPrice = price
				} else {
					h.logger.LogError(fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–Ω—ã '%s' –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '%s' –Ω–∞ —Å—Ç—Ä–æ–∫–µ %d", priceStr, itemName, lineNumber), "")
					// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ü–µ–Ω–æ–π 0
				}
			}
		}

		// –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
		_, err := stmt.Exec(itemName, currentCategory, minPrice)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '%s' –Ω–∞ —Å—Ç—Ä–æ–∫–µ %d: %v", itemName, lineNumber, err)
		}

		// –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è sell_consumables
		if currentCategory == "sell_consumables" {
			h.logger.Info("üîç DEBUG: –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç '%s' —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '%s' –∏ —Ü–µ–Ω–æ–π %.2f", itemName, currentCategory, minPrice)
		}

		// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
		switch currentCategory {
		case "buy_consumables":
			buyConsumablesCount++
		case "buy_equipment":
			buyEquipmentCount++
		case "sell_consumables":
			sellConsumablesCount++
		case "sell_equipment":
			sellEquipmentCount++
		}
	}

	if err := scanner.Err(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err)
	}

	// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
	err = tx.Commit()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: %v", err)
	}

	h.logger.Info("üîç DEBUG: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

	h.logger.Info("üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %d buy_consumables, %d buy_equipment, %d sell_consumables, %d sell_equipment",
		buyConsumablesCount, buyEquipmentCount, sellConsumablesCount, sellEquipmentCount)

	return nil
}

// GetItemsList –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (h *DatabaseManager) GetItemsList() ([]string, error) {
	rows, err := h.db.Query("SELECT name FROM items_list ORDER BY id")
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %v", err)
	}
	defer rows.Close()

	var items []string
	for rows.Next() {
		var itemName string
		err := rows.Scan(&itemName)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: %v", err)
		}
		items = append(items, itemName)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: %v", err)
	}

	return items, nil
}

// GetItemsByCategory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func (h *DatabaseManager) GetItemsByCategory(category string) ([]string, error) {
	rows, err := h.db.Query("SELECT name FROM items_list WHERE category = ? ORDER BY id", category)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ %s: %v", category, err)
	}
	defer rows.Close()

	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: %v", err)
		}
		items = append(items, name)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: %v", err)
	}

	return items, nil
}

// GetItemsWithCategories –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
func (h *DatabaseManager) GetItemsWithCategories() (map[string][]string, error) {
	rows, err := h.db.Query("SELECT name, category FROM items_list ORDER BY category, id")
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: %v", err)
	}
	defer rows.Close()

	itemsByCategory := make(map[string][]string)
	for rows.Next() {
		var itemName, category string
		err := rows.Scan(&itemName, &category)
		if err != nil {
			return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: %v", err)
		}
		itemsByCategory[category] = append(itemsByCategory[category], itemName)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º: %v", err)
	}

	return itemsByCategory, nil
}

// GetItemIDByName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
func (h *DatabaseManager) GetItemIDByName(itemName string) (int, error) {
	var id int
	err := h.db.QueryRow("SELECT id FROM items_list WHERE name = ?", itemName).Scan(&id)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–µ–¥–º–µ—Ç–∞ '%s': %v", itemName, err)
	}
	return id, nil
}

// GetItemCategory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
func (h *DatabaseManager) GetItemCategory(itemName string) (string, error) {
	var category string
	err := h.db.QueryRow("SELECT category FROM items_list WHERE name = ?", itemName).Scan(&category)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ '%s': %v", itemName, err)
	}
	return category, nil
}

func (h *DatabaseManager) RecreateItemsTable() error {
	h.logger.Info("üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É items_list...")

	// –£–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	_, err := h.db.Exec("ALTER TABLE structured_items DROP FOREIGN KEY structured_items_ibfk_2")
	if err != nil {
		h.logger.Info("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á structured_items_ibfk_2: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É
	_, err = h.db.Exec("DROP TABLE IF EXISTS items_list")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã items_list: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS items_list (
		id INT AUTO_INCREMENT PRIMARY KEY,
		name VARCHAR(255) NOT NULL,
		category VARCHAR(50) NOT NULL DEFAULT 'consumables',
		min_price DECIMAL(15,2) DEFAULT 0,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		UNIQUE KEY unique_item_category (name, category)
	)`

	_, err = h.db.Exec(createTableSQL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã items_list: %v", err)
	}

	// –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ items_list –≤ structured_items
	_, err = h.db.Exec("UPDATE structured_items SET item_list_id = NULL")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ structured_items: %v", err)
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
	_, err = h.db.Exec(`
		ALTER TABLE structured_items
		ADD CONSTRAINT structured_items_ibfk_2
		FOREIGN KEY (item_list_id) REFERENCES items_list(id)
		ON DELETE SET NULL
	`)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞: %v", err)
	}

	h.logger.Info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ items_list –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// GetCurrentStatus –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func (h *DatabaseManager) GetCurrentStatus() (string, error) {
	var status string
	err := h.db.QueryRow("SELECT current_status FROM status ORDER BY created_at DESC LIMIT 1").Scan(&status)
	if err != nil {
		if err == sql.ErrNoRows {
			return "stopped", nil // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
		}
		return "", err
	}
	return status, nil
}

// GetLatestUnexecutedAction –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
func (h *DatabaseManager) GetLatestUnexecutedAction() (string, int, error) {
	var action string
	var id int
	err := h.db.QueryRow("SELECT id, action FROM actions WHERE executed = 0 ORDER BY created_at DESC LIMIT 1").Scan(&id, &action)
	if err != nil {
		if err == sql.ErrNoRows {
			return "", 0, nil // –ù–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
		}
		return "", 0, err
	}
	return action, id, nil
}

// MarkActionAsExecuted –ø–æ–º–µ—á–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
func (h *DatabaseManager) MarkActionAsExecuted(actionID int) error {
	_, err := h.db.Exec("UPDATE actions SET executed = 1 WHERE id = ?", actionID)
	return err
}

// UpdateStatus –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
func (h *DatabaseManager) UpdateStatus(status string) error {
	_, err := h.db.Exec("INSERT INTO status (current_status) VALUES (?)", status)
	return err
}
