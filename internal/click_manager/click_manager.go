package click_manager

import (
	"fmt"
	"image"
	"image/png"
	"os"
	"time"

	"github.com/tarm/serial"

	"octopus/internal/arduino"
	"octopus/internal/config"
	"octopus/internal/database"
	imageInternal "octopus/internal/image"
	"octopus/internal/screenshot"
)

// ScreenshotManager –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏
type ScreenshotManager interface {
	CaptureScreenShot() image.Image
	SaveScreenShot(cfg *config.Config) image.Image
}

// ClickManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∏–∫–∞–º–∏ –∏ —Å–∫—Ä–æ–ª–ª–æ–º
type ClickManager struct {
	port             *serial.Port
	config           *config.Config
	marginX          int
	marginY          int
	screenshotHelper ScreenshotManager
	imageHelper      *imageInternal.ImageHelper
	dbManager        *database.DatabaseManager
}

// NewClickManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ClickManager
func NewClickManager(port *serial.Port, config *config.Config, marginX, marginY int, screenshotHelper ScreenshotManager, dbManager *database.DatabaseManager) *ClickManager {
	return &ClickManager{
		port:             port,
		config:           config,
		marginX:          marginX,
		marginY:          marginY,
		screenshotHelper: screenshotHelper,
		imageHelper:      imageInternal.NewImageHelper(port, config, marginX, marginY),
		dbManager:        dbManager,
	}
}

// CheckAndScreenScroll –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫—Ä–æ–ª–ª —ç–∫—Ä–∞–Ω–∞
func (m *ClickManager) CheckAndScreenScroll(counter int, x int, img image.Image) (int, int) {
	scrollRPx, scrollGPx, scrollBPx, _ := imageInternal.GetPixelColor(img, 290, 15)
	fmt.Printf("scrollRPx: %v %v %v\n", scrollRPx, scrollGPx, scrollBPx)
	if scrollRPx > 26 {
		arduino.ScrollUp(m.port, m.config, counter+5)
		return counter + 1, x
	}
	return counter, x
}

// CheckAndClickScreenScroll –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–ª–∏–∫–∞–µ—Ç –ø–æ —Å–∫—Ä–æ–ª–ª—É
func (m *ClickManager) CheckAndClickScreenScroll(counter int, img image.Image) (int, int) {
	scrollRPx, scrollGPx, scrollBPx, _ := imageInternal.GetPixelColor(img, 290, 15)
	fmt.Printf("scrollRPx: %v %v %v\n", scrollRPx, scrollGPx, scrollBPx)
	if scrollRPx > 26 {
		arduino.ClickCoordinates(m.port, m.config, config.Coordinates{X: m.marginX + 290, Y: m.marginY + 15})
		return counter + 1, 290
	}
	return counter, 290
}

// saveImage —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
func (m *ClickManager) saveImage(img image.Image, fileName string) error {
	outFile, err := os.Create(fileName)
	if err != nil {
		return fmt.Errorf("failed to create file: %v", err)
	}
	defer outFile.Close()

	err = png.Encode(outFile, img)
	if err != nil {
		return fmt.Errorf("failed to save image: %v", err)
	}
	return nil
}

// combineImagesVertically –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
func (m *ClickManager) combineImagesVertically(img1, img2 image.Image) (image.Image, error) {
	bounds1 := img1.Bounds()
	bounds2 := img2.Bounds()

	width := bounds1.Dx()
	height := bounds1.Dy() + bounds2.Dy()

	combinedImg := image.NewRGBA(image.Rect(0, 0, width, height))

	// –ö–æ–ø–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	for y := bounds1.Min.Y; y < bounds1.Max.Y; y++ {
		for x := bounds1.Min.X; x < bounds1.Max.X; x++ {
			combinedImg.Set(x, y, img1.At(x, y))
		}
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	for y := bounds2.Min.Y; y < bounds2.Max.Y; y++ {
		for x := bounds2.Min.X; x < bounds2.Max.X; x++ {
			combinedImg.Set(x, y+bounds1.Dy(), img2.At(x, y))
		}
	}

	return combinedImg, nil
}

// PerformScreenshotWithScroll –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º
func (m *ClickManager) PerformScreenshotWithScroll(buttonPressed bool) (image.Image, string, error) {
	fmt.Println("=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è performScreenshotWithScroll ===")

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
	img := m.screenshotHelper.CaptureScreenShot()
	scrollRPx, scrollGPx, scrollBPx, _ := imageInternal.GetPixelColor(img, 290, 15)
	fmt.Printf("scrollRPx: %v %v %v\n", scrollRPx, scrollGPx, scrollBPx)

	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫—Ä–æ–ª–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
	if scrollRPx <= 26 {
		fmt.Println("‚ùå –°–∫—Ä–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (scrollRPx <= 26), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
		fileCount, _ := screenshot.CountFilesInDir("./imgs")
		fileName := fmt.Sprintf("%s/screenshot_%d.png", "./imgs", fileCount)
		err := m.saveImage(img, fileName)
		if err != nil {
			return nil, "", err
		}
		return img, fileName, nil
	}

	fmt.Println("‚úÖ –°–∫—Ä–æ–ª–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
	fileCount, _ := screenshot.CountFilesInDir("./imgs")
	fileName1 := fmt.Sprintf("%s/screenshot_1_%d.png", "./imgs", fileCount)
	err := m.saveImage(img, fileName1)
	if err != nil {
		return nil, "", err
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª
	fmt.Println("üìú –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª...")
	arduino.ScrollUp(m.port, m.config, 5)

	// –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
	time.Sleep(500 * time.Millisecond)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
	fmt.Println("üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç...")
	img2 := m.screenshotHelper.CaptureScreenShot()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç
	fileName2 := fmt.Sprintf("%s/screenshot_2_%d.png", "./imgs", fileCount)
	err = m.saveImage(img2, fileName2)
	if err != nil {
		return nil, "", err
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
	fmt.Println("üîó –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
	combinedImg, err := m.combineImagesVertically(img, img2)
	if err != nil {
		return nil, "", err
	}

	// –û–±—Ä–µ–∑–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
	if buttonPressed {
		fmt.Println("‚úÇÔ∏è –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞)...")
		bounds := combinedImg.Bounds()
		cropRect := image.Rect(0, 0, bounds.Dx(), bounds.Dy()-100)
		croppedCombinedImg := combinedImg.(interface {
			SubImage(r image.Rectangle) image.Image
		}).SubImage(cropRect)
		combinedImg = croppedCombinedImg
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	fileName := fmt.Sprintf("%s/screenshot_combined_%d.png", "./imgs", fileCount)
	err = imageInternal.SaveCombinedImage(combinedImg, fileName)
	if err != nil {
		return nil, "", err
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª
	arduino.ScrollUp(m.port, m.config, 5)

	fmt.Println("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ performScreenshotWithScroll ===")
	return combinedImg, fileName, nil
}

// CaptureScreenShotsWithScroll –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞—Ö–≤–∞—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º

// ClickItem –∫–ª–∏–∫–∞–µ—Ç –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
func (m *ClickManager) ClickItem(item config.Coordinates) {

}

// GetPort –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
func (m *ClickManager) GetPort() *serial.Port {
	return m.port
}

// FocusL2Window —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç –æ–∫–Ω–æ L2, –∫–ª–∏–∫–∞—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º Item1
func (m *ClickManager) FocusL2Window() {
	arduino.ClickCoordinates(m.port, m.config, m.config.Click.Item1)
}

// ClickCoordinates –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª–∏–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
func (m *ClickManager) ClickCoordinates(coordinates config.Coordinates) {
	arduino.ClickCoordinates(m.port, m.config, coordinates)
}
