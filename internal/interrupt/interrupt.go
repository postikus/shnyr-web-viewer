package interrupt

import (
	"shnyr/internal/logger"

	"github.com/moutend/go-hook/pkg/keyboard"
	"github.com/moutend/go-hook/pkg/types"
)

// InterruptManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è–º–∏ –∏ –≥–æ—Ä—è—á–∏–º–∏ –∫–ª–∞–≤–∏—à–∞–º–∏
type InterruptManager struct {
	scriptInterruptChan chan bool
	scriptStartChan     chan bool
	isScriptRunning     *bool
	loggerManager       *logger.LoggerManager
}

// NewInterruptManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π
func NewInterruptManager(loggerManager *logger.LoggerManager) *InterruptManager {
	isScriptRunning := false
	return &InterruptManager{
		scriptInterruptChan: make(chan bool, 1),
		scriptStartChan:     make(chan bool, 1),
		isScriptRunning:     &isScriptRunning,
		loggerManager:       loggerManager,
	}
}

// StartMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
func (im *InterruptManager) StartMonitoring() {
	go im.monitorHotkeys()
}

// GetScriptInterruptChan –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
func (im *InterruptManager) GetScriptInterruptChan() <-chan bool {
	return im.scriptInterruptChan
}

// GetScriptStartChan –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
func (im *InterruptManager) GetScriptStartChan() <-chan bool {
	return im.scriptStartChan
}

// SetScriptRunning —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
func (im *InterruptManager) SetScriptRunning(running bool) {
	*im.isScriptRunning = running
}

// IsScriptRunning –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
func (im *InterruptManager) IsScriptRunning() bool {
	return *im.isScriptRunning
}

// monitorHotkeys –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
func (im *InterruptManager) monitorHotkeys() {
	eventChan := make(chan types.KeyboardEvent, 100)
	go keyboard.Install(nil, eventChan)
	defer keyboard.Uninstall()

	shiftPressed := false

	for event := range eventChan {
		if event.Message == types.WM_KEYDOWN && (event.VKCode == types.VK_LSHIFT || event.VKCode == types.VK_RSHIFT) {
			shiftPressed = true
		}
		if event.Message == types.WM_KEYUP && (event.VKCode == types.VK_LSHIFT || event.VKCode == types.VK_RSHIFT) {
			shiftPressed = false
		}
		if event.Message == types.WM_KEYDOWN && event.VKCode == types.VK_RETURN && shiftPressed {
			im.scriptStartChan <- true
		}
		if event.Message == types.WM_KEYDOWN && (event.VKCode == types.VK_Q || event.VKCode == types.VK_CAPITAL) {
			// Q –≤—Å–µ–≥–¥–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç script1, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
			if im.isScriptRunning != nil && *im.isScriptRunning {
				im.scriptInterruptChan <- true
			}
		}
	}
}

// LogInstructions –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
func (im *InterruptManager) LogInstructions() {
	im.loggerManager.Info("‚è∏Ô∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–∂–º–∏—Ç–µ Shift+Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞ script1, Q –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
	im.loggerManager.Info("üî• –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏: Shift+Enter –¥–ª—è –∑–∞–ø—É—Å–∫–∞, Q –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è script1")
}
