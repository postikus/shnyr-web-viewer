package scpript1

import (
	"fmt"
	"image"
	"log"
	"octopus/internal/click_manager"
	"octopus/internal/config"
	"octopus/internal/database"
	imageInternal "octopus/internal/image"
	"octopus/internal/ocr"
	"octopus/internal/screenshot"
)

// clickPageButton –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
func clickPageButton(c *config.Config, clickManager *click_manager.ClickManager, dbManager *database.DatabaseManager, buttonName string, buttonCoords config.Coordinates, isActive bool, marginX, marginY int) {
	if isActive {
		log.Printf("üîò –ö–ª–∏–∫–∞–µ–º –ø–æ %s...", buttonName)
		clickManager.ClickCoordinates(config.Coordinates{X: marginX + buttonCoords.X, Y: marginY + buttonCoords.Y})
	} else {
		log.Printf("‚è≠Ô∏è %s –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", buttonName)
	}
}

// getScreenshotOfItemPage –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–∞
func getScreenshotOfItemPage(c *config.Config, clickManager *click_manager.ClickManager, screenshotManager *screenshot.ScreenshotManager, buttonStatus imageInternal.ButtonStatus, scrollRPx int, marginX, marginY int) (image.Image, error) {
	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫—Ä–æ–ª–ª–∞, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
	if scrollRPx <= 26 {
		log.Println("‚ùå –°–∫—Ä–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (scrollRPx <= 26), –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
		return screenshotManager.CaptureScreenShot(), nil
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ OCR (–±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
	fmt.Println("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º...")
	if buttonStatus.Button2Active {
		img, _, err := clickManager.PerformScreenshotWithScroll(true)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º: %v\n", err)
			return img, err
		}
		return img, nil
	} else {
		img, _, err := clickManager.PerformScreenshotWithScroll(false)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º: %v\n", err)
			return img, err
		}
		return img, nil
	}
}

// processItemPages –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç (–∫–ª–∏–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–æ–ª–ª–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
func processItemPages(c *config.Config, clickManager *click_manager.ClickManager, screenshotManager *screenshot.ScreenshotManager, dbManager *database.DatabaseManager, ocrManager *ocr.OCRManager, point image.Point, marginX, marginY int) {

	img := screenshotManager.CaptureScreenShot()

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–æ–ª–ª –≤–æ–æ–±—â–µ
	scrollRPx, scrollGPx, scrollBPx, _ := imageInternal.GetPixelColor(img, 290, 15)
	log.Printf("scrollRPx: %v %v %v\n", scrollRPx, scrollGPx, scrollBPx)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
	log.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫...")
	buttonStatus := imageInternal.CheckAllButtonsStatus(img, c, marginX, marginY)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞
	itemPageImg, err := getScreenshotOfItemPage(c, clickManager, screenshotManager, buttonStatus, scrollRPx, marginX, marginY)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: %v", err)
		return
	}

	result, debugInfo, jsonData, rawText, err := ocrManager.ProcessImage(itemPageImg, "itemPageImg")
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ OCR: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	imageBytes, err := imageInternal.ImageToBytes(itemPageImg)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		return
	}

	_, err = dbManager.SaveOCRResultToDB("itemPageImg", result, debugInfo, jsonData, rawText, imageBytes, c)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: %v", err)
	}

	// –ö–ª–∏–∫–∞–µ–º Back —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏
	log.Println("üîô –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Back...")
	clickManager.ClickCoordinates(config.Coordinates{X: marginX + c.Click.Back.X, Y: marginY + c.Click.Back.Y})
	log.Println("‚úÖ Back –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
}

var Run = func(c *config.Config, screenshotManager *screenshot.ScreenshotManager, dbManager *database.DatabaseManager, ocrManager *ocr.OCRManager, clickManager *click_manager.ClickManager, marginX, marginY int) {
	// –±–µ—Ä–µ–º –æ–∫–Ω–æ –≤ —Ñ–æ–∫—É—Å (–∫–ª–∏–∫–∞–µ–º –ø–æ –ª—é–±—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
	clickManager.FocusL2Window()

	// —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
	cycles := 0

	for cycles < c.MaxCyclesItemsList {
		// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		itemCoordinates, err := screenshotManager.GetItemListItemsCoordinates()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: %v", err)
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
		for _, coordinate := range itemCoordinates {
			log.Printf("üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: %v", coordinate)
			processItemPages(c, clickManager, screenshotManager, dbManager, ocrManager, coordinate, marginX, marginY)
		}

		cycles += 1
	}
}
