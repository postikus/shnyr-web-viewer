package scpript1

import (
	"bytes"
	"database/sql"
	"fmt"
	"image"
	"image/png"
	"io/ioutil"
	"log"
	"octopus/internal/config"
	imageInternal "octopus/internal/image"
	"octopus/internal/ocr"
	"octopus/internal/screen"
	"octopus/internal/screenshot"
	"octopus/internal/scripts"
	"os"

	"github.com/tarm/serial"
)

var Run = func(port *serial.Port, c *config.Config, db *sql.DB) {

	// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ—Ç—Ä–µ–∑–∞–Ω–∏—è —Å–≤–µ—Ä—Ö—É
	topOffset := 23

	// –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
	img, err := screen.CaptureFullScreen()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞: %v", err)
	}

	// –û–±—Ä–µ–∑–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–µ –ø–∏–∫—Å–µ–ª–∏
	bounds := img.Bounds()
	croppedImg := image.NewRGBA(image.Rect(0, 0, bounds.Dx(), bounds.Dy()-topOffset))
	for y := topOffset; y < bounds.Dy(); y++ {
		for x := 0; x < bounds.Dx(); x++ {
			croppedImg.Set(x, y-topOffset, img.At(x, y))
		}
	}

	// –ò—â–µ–º –æ–∫–Ω–æ
	gameWindow, err := imageInternal.FindGameWindow(croppedImg)
	if err != nil {
		fmt.Printf("–û–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: %v\n", err)
		return
	}

	marginX := gameWindow.X - 150
	marginY := gameWindow.Y + topOffset + 48

	fmt.Printf("marginX, marginY: %v %v\n", marginX, marginY)

	var captureScreenShot = func() image.Image {
		img, _ := screenshot.CaptureScreenshot(config.CoordinatesWithSize{X: marginX, Y: marginY, Width: 300, Height: 361})
		return img
	}

	var saveScreenShot = func() image.Image {
		img, _ := screenshot.SaveScreenshot(config.CoordinatesWithSize{X: marginX, Y: marginY, Width: 300, Height: 361}, c)
		return img
	}

	var saveScreenShotFull = func() image.Image {
		img, _ := screenshot.SaveScreenshotFull(config.CoordinatesWithSize{X: marginX, Y: marginY, Width: 300, Height: 361})
		return img
	}

	var checkAndScreenScroll = func(counter int, x int) (int, int) {
		img := captureScreenShot()
		r, _, _, _ := imageInternal.GetPixelColor(img, 297, 320)
		fmt.Printf("r: %v\n", r)
		if r < 50 {
			scripts.ScrollDown(port, c, x)
		}
		return counter + 1, r
	}

	var checkAndClickScreenScroll = func(counter int) (int, int) {
		img := captureScreenShot()
		r, _, _, _ := imageInternal.GetPixelColor(img, 297, 342)
		if r < 50 {
			scripts.FastClick(port, c)
		}
		return counter + 1, r
	}

	countFilesInDir := func(dir string) (int, error) {
		files, err := ioutil.ReadDir(dir)
		if err != nil {
			return 0, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–∞–ø–∫—É: %v", err)
		}

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
		return len(files), nil
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏
	var checkButtonActive = func(buttonX, buttonY int, buttonName string) bool {
		img := captureScreenShot()
		buttonRPx, _, _, _ := imageInternal.GetPixelColor(img, buttonX, 36)
		fmt.Printf("%s RPx: %v\n", buttonName, buttonRPx)
		return buttonRPx == 86
	}

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ OCR
	var performScreenshotAndOCR = func(buttonPressed bool) error {
		counter := 0
		maxCounter := 40
		scrollRPx := 26

		// –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
		var screenshots []image.Image
		var smallScreenshots []image.Image

		img := captureScreenShot()
		saveScreenShotFull()
		screenshots = append(screenshots, img)

		scrollRPx, scrollGPx, scrollBPx, _ := imageInternal.GetPixelColor(img, 290, 15)
		fmt.Printf("scrollRPx: %v %v %v\n", scrollRPx, scrollGPx, scrollBPx)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ 1, 2 –∏–ª–∏ 3
		button1Active := checkButtonActive(c.Click.Button1.X, c.Click.Button1.Y, "listButton1")
		button2Active := checkButtonActive(c.Click.Button2.X, c.Click.Button2.Y, "listButton2")
		button3Active := checkButtonActive(c.Click.Button3.X, c.Click.Button3.Y, "listButton3")

		topCrop := 22 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–µ–∑–∞–µ–º 22 –ø–∏–∫—Å–µ–ª—è —Å–≤–µ—Ä—Ö—É
		if buttonPressed || button1Active || button2Active || button3Active {
			topCrop = 45
		}

		if scrollRPx > 26 {
			scrollRPx = 26
			for counter < maxCounter && scrollRPx < 50 {
				counter, scrollRPx = checkAndScreenScroll(counter, 1)
				if scrollRPx < 50 {
					img = captureScreenShot()
					screenshots = append(screenshots, img)
				}
			}

			scrollRPx = 26
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Scroll.X, Y: marginY + c.Click.Scroll.Y})
			for counter < maxCounter && scrollRPx < 50 {
				counter, scrollRPx = checkAndClickScreenScroll(counter)
				if scrollRPx < 50 {
					img = captureScreenShot()
					smallScreenshots = append(smallScreenshots, img)
				}
			}

			var finalImage image.Image
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ stripe_diff –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–º smallScreenshots
			if len(smallScreenshots) >= 2 {
				prev := smallScreenshots[len(smallScreenshots)-2]
				last := smallScreenshots[len(smallScreenshots)-1]
				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–≤–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —Ñ–∞–π–ª—ã
				f1, _ := os.Create("last_prev.png")
				defer f1.Close()
				png.Encode(f1, prev)
				f2, _ := os.Create("last.png")
				defer f2.Close()
				png.Encode(f2, last)
				diff, err := imageInternal.LastColorStripeDistanceDiff(prev, last, 26, 20)
				if err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ stripe diff: %v\n", err)
				} else {
					finalImage, _ = imageInternal.CombineImages(screenshots, smallScreenshots[:len(smallScreenshots)-1], smallScreenshots[len(smallScreenshots)-1], diff)
					fmt.Printf("–†–∞–∑–Ω–∏—Ü–∞ stripe diff –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º: %d\n", diff)
				}
			} else if len(smallScreenshots) == 1 {
				prev := screenshots[len(screenshots)-1]
				last := smallScreenshots[len(smallScreenshots)-1]
				diff, err := imageInternal.LastColorStripeDistanceDiff(prev, last, 26, 20)
				if err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ stripe diff: %v\n", err)
				} else {
					finalImage, _ = imageInternal.CombineImages(screenshots, smallScreenshots[:len(smallScreenshots)-1], nil, 0)
					fmt.Printf("–†–∞–∑–Ω–∏—Ü–∞ stripe diff –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏ –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º: %d\n", diff)
				}
			} else {
				finalImage, _ = imageInternal.CombineImages(screenshots, nil, nil, 0)
			}

			combinedImg := imageInternal.CropOpacityPixel(finalImage)
			bounds := combinedImg.Bounds()
			cropRect := image.Rect(40, topCrop, bounds.Dx()-17, bounds.Dy())
			croppedCombinedImg := combinedImg.(interface {
				SubImage(r image.Rectangle) image.Image
			}).SubImage(cropRect)
			img = croppedCombinedImg
		} else {
			// –ï—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∫–∞–¥—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
			fmt.Println("‚ö†Ô∏è scrollRPx <= 26, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
			bounds := img.Bounds()
			cropRect := image.Rect(40, topCrop, bounds.Dx()-17, bounds.Dy())
			croppedCombinedImg := img.(interface {
				SubImage(r image.Rectangle) image.Image
			}).SubImage(cropRect)
			img = croppedCombinedImg
		}

		fileCount, _ := countFilesInDir("./imgs")
		fileName := fmt.Sprintf("%s/screenshot_combined_%d.png", "./imgs", fileCount)
		err := imageInternal.SaveCombinedImage(img, fileName)
		if err != nil {
			return err
		}

		scripts.ScrollUp(port, c, counter+5)

		result, err := ocr.RunOCR(fileName)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ OCR: %v\n", err)
			return err
		}

		fmt.Println(result)

		// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR
		debugInfo, jsonData, rawText := ocr.ParseOCRResult(result)

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
		imageBytes, err := imageToBytes(img)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
			return err
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		_, err = saveOCRResultToDB(db, fileName, result, debugInfo, jsonData, rawText, imageBytes, c)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: %v", err)
			return err
		}

		return nil
	}

	var captureScreenShotsWithScroll = func() bool {
		fmt.Println("=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è captureScreenShotsWithScroll ===")

		// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫—Ä–æ–ª–ª –≤–æ–æ–±—â–µ
		img := captureScreenShot()
		scrollRPx, scrollGPx, scrollBPx, _ := imageInternal.GetPixelColor(img, 290, 15)
		fmt.Printf("scrollRPx: %v %v %v\n", scrollRPx, scrollGPx, scrollBPx)

		// –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫—Ä–æ–ª–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
		if scrollRPx <= 26 {
			fmt.Println("‚ùå –°–∫—Ä–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (scrollRPx <= 26), –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏")
			return false
		}
		fmt.Println("‚úÖ –°–∫—Ä–æ–ª–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
		fmt.Println("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫...")
		// SaveScreenshotFull()
		button2Active := checkButtonActive(c.Click.Button2.X, c.Click.Button2.Y, "listButton2")
		button3Active := checkButtonActive(c.Click.Button3.X, c.Click.Button3.Y, "listButton3")
		button4Active := checkButtonActive(c.Click.Button4.X, c.Click.Button4.Y, "listButton4")
		button5Active := checkButtonActive(c.Click.Button5.X, c.Click.Button5.Y, "listButton5")
		button6Active := checkButtonActive(c.Click.Button6.X, c.Click.Button6.Y, "listButton6")

		fmt.Printf("üìã –°—Ç–∞—Ç—É—Å –∫–Ω–æ–ø–æ–∫: Button2=%v, Button3=%v, Button4=%v, Button5=%v, Button6=%v\n",
			button2Active, button3Active, button4Active, button5Active, button6Active)

		// –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ OCR (–±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
		fmt.Println("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ OCR...")
		if button2Active {
			err := performScreenshotAndOCR(true)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: %v\n", err)
				return false
			}
		} else {
			err := performScreenshotAndOCR(false)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: %v\n", err)
				return false
			}
		}

		fmt.Println("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")

		// –ò–¥–µ–º –ø–æ –∫–Ω–æ–ø–∫–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
		if button2Active {
			fmt.Println("üîò –ö–ª–∏–∫–∞–µ–º –ø–æ Button2...")
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button2.X, Y: marginY + c.Click.Button2.Y})
			err := performScreenshotAndOCR(true)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Button2: %v\n", err)
				return false
			}
			fmt.Println("‚úÖ Button2 –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
		} else {
			fmt.Println("‚è≠Ô∏è Button2 –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		}

		if button3Active {
			fmt.Println("üîò –ö–ª–∏–∫–∞–µ–º –ø–æ Button3...")
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button3.X, Y: marginY + c.Click.Button3.Y})
			err := performScreenshotAndOCR(true)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Button3: %v\n", err)
				return false
			}
			fmt.Println("‚úÖ Button3 –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
		} else {
			fmt.Println("‚è≠Ô∏è Button3 –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		}

		if button4Active {
			fmt.Println("üîò –ö–ª–∏–∫–∞–µ–º –ø–æ Button4...")
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button4.X, Y: marginY + c.Click.Button4.Y})
			err := performScreenshotAndOCR(true)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Button4: %v\n", err)
				return false
			}
			fmt.Println("‚úÖ Button4 –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
		} else {
			fmt.Println("‚è≠Ô∏è Button4 –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		}

		if button5Active {
			fmt.Println("üîò –ö–ª–∏–∫–∞–µ–º –ø–æ Button5...")
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button5.X, Y: marginY + c.Click.Button5.Y})
			err := performScreenshotAndOCR(true)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Button5: %v\n", err)
				return false
			}
			fmt.Println("‚úÖ Button5 –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
		} else {
			fmt.Println("‚è≠Ô∏è Button5 –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		}

		if button6Active {
			fmt.Println("üîò –ö–ª–∏–∫–∞–µ–º –ø–æ Button6...")
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button6.X, Y: marginY + c.Click.Button6.Y})
			err := performScreenshotAndOCR(true)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Button6: %v\n", err)
				return false
			}
			fmt.Println("‚úÖ Button6 –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
		} else {
			fmt.Println("‚è≠Ô∏è Button6 –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
		}

		// –ö–ª–∏–∫–∞–µ–º Back —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏
		fmt.Println("üîô –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Back...")
		scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Back.X, Y: marginY + c.Click.Back.Y})
		fmt.Println("‚úÖ Back –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")

		fmt.Println("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ captureScreenShotsWithScroll ===")
		return true
	}

	var clickItem = func(item config.Coordinates) {
		scripts.ClickCoordinates(port, c, item)
		combinedSaved := captureScreenShotsWithScroll()
		if !combinedSaved {
			saveScreenShot()
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Back.X, Y: marginY + c.Click.Back.Y})
		}

	}

	var clickEveryItemAnsScreenShot = func(img image.Image) {
		// –ø—Ä–æ–∫–ª–∏–∫–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		points := imageInternal.FindItemPositionsByTextColor(img, 80)
		fmt.Printf("üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –∫–ª–∏–∫–∞: %d\n", len(points))
		if len(points) > 0 {
			fmt.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...\n")
			for i, point := range points {
				fmt.Printf("üñ±Ô∏è –ö–ª–∏–∫–∞–µ–º –ø–æ —Ç–æ—á–∫–µ %d: (%d, %d)\n", i+1, point.X, point.Y)
				clickItem(config.Coordinates{Y: point.Y + marginY, X: marginX + point.X})
			}
		} else {
			fmt.Printf("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ—á–µ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω—É–∂–Ω–æ > 0, –Ω–∞–π–¥–µ–Ω–æ: %d)\n", len(points))
		}

		// clickItem(config.Coordinates{X: marginX + 80, Y: marginY + c.Click.Item1.Y})
	}

	// // –±–µ—Ä–µ–º –≤ —Ñ–æ–∫—É—Å –∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω
	// scripts.ClickCoordinates(port, c, c.Click.Item1)
	// img = captureScreenShot()
	// clickEveryItemAnsScreenShot(img)

	// –±–µ—Ä–µ–º –≤ —Ñ–æ–∫—É—Å
	scripts.ClickCoordinates(port, c, c.Click.Item1)

	cycles := 0
	for cycles < 2 {
		img := captureScreenShot()
		clickEveryItemAnsScreenShot(img)

		scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button2.X, Y: marginY + c.Click.Button2.Y})
		img = captureScreenShot()
		clickEveryItemAnsScreenShot(img)

		scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button3.X, Y: marginY + c.Click.Button3.Y})
		img = captureScreenShot()
		clickEveryItemAnsScreenShot(img)

		scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button4.X, Y: marginY + c.Click.Button4.Y})
		img = captureScreenShot()
		clickEveryItemAnsScreenShot(img)

		scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button5.X, Y: marginY + c.Click.Button5.Y})
		img = captureScreenShot()
		clickEveryItemAnsScreenShot(img)

		scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button6.X, Y: marginY + c.Click.Button6.Y})
		img = captureScreenShot()
		clickEveryItemAnsScreenShot(img)

		img = captureScreenShot()
		SixButtonPx, _, _, _ := imageInternal.GetPixelColor(img, c.Click.Button6.X, 35)
		maxSixButtonClicks := 0

		for SixButtonPx > 30 && maxSixButtonClicks < 50 {
			scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Button6.X, Y: marginY + c.Click.Button6.Y})
			img = captureScreenShot()
			clickEveryItemAnsScreenShot(img)
			img = captureScreenShot()
			SixButtonPx, _, _, _ = imageInternal.GetPixelColor(img, c.Click.Button6.X, 35)
			maxSixButtonClicks += 1
		}

		scripts.ClickCoordinates(port, c, config.Coordinates{X: marginX + c.Click.Back.X, Y: marginY + c.Click.Back.Y})
		// scripts.ClickCoordinates(port, c, config.Coordinates{X: 35, Y: 107})

		cycles += 1
	}

}

// saveOCRResultToDB —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func saveOCRResultToDB(db *sql.DB, imagePath, ocrResult string, debugInfo, jsonData string, rawText string, imageData []byte, cfg *config.Config) (int, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
	if cfg.SaveToDB != 1 {
		log.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–æ (save_to_db = %d)", cfg.SaveToDB)
		return 0, nil
	}

	log.Printf("üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ë–î...")
	log.Printf("üìÑ JSON –¥–∞–Ω–Ω—ã–µ (–¥–ª–∏–Ω–∞: %d): %s", len(jsonData), jsonData)
	log.Printf("üîç Debug info (–¥–ª–∏–Ω–∞: %d): %s", len(debugInfo), debugInfo[:min(100, len(debugInfo))])
	log.Printf("üìù Raw text (–¥–ª–∏–Ω–∞: %d): %s", len(rawText), rawText[:min(100, len(rawText))])

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS ocr_results (
		id INT AUTO_INCREMENT PRIMARY KEY,
		image_path VARCHAR(255) NOT NULL,
		image_data LONGBLOB,
		ocr_text LONGTEXT,
		debug_info LONGTEXT,
		json_data LONGTEXT,
		raw_text LONGTEXT,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	)`

	_, err := db.Exec(createTableSQL)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	insertSQL := `INSERT INTO ocr_results (image_path, image_data, ocr_text, debug_info, json_data, raw_text) VALUES (?, ?, ?, ?, ?, ?)`
	result, err := db.Exec(insertSQL, imagePath, imageData, ocrResult, debugInfo, jsonData, rawText)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
	ocrResultID, err := result.LastInsertId()
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø–∏—Å–∏: %v", err)
	}

	log.Printf("‚úÖ OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: %d", ocrResultID)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if jsonData != "" {
		log.Printf("üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è OCR ID: %d", ocrResultID)
		err = ocr.SaveStructuredData(db, int(ocrResultID), jsonData)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
		} else {
			log.Printf("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
		}
	} else {
		log.Printf("‚ö†Ô∏è JSON –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ structured items")
	}

	log.Printf("OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–ª–∞: %s (ID: %d)", imagePath, ocrResultID)
	return int(ocrResultID), nil
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

// imageToBytes –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
func imageToBytes(img image.Image) ([]byte, error) {
	var buf bytes.Buffer
	err := png.Encode(&buf, img)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
	}
	return buf.Bytes(), nil
}
