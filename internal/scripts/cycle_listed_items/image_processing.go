package cycle_listed_items

import (
	"bytes"
	"image"
	"image/png"
	"shnyr/internal/config"
	"shnyr/internal/database"
	"shnyr/internal/logger"
	"shnyr/internal/ocr"
	"shnyr/internal/screenshot"
)

var processItemPage = func(c *config.Config,
	pageStatus screenshot.PageStatus,
	screenshotManager *screenshot.ScreenshotManager,
	loggerManager *logger.LoggerManager) (image.Image, string, error) {

	var finalImg image.Image
	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	img, err := screenshotManager.CaptureScreenShot()
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
		return nil, "", err
	}

	// –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –ª–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	loggerManager.Info("üìÑ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –∫–Ω–æ–ø–∫–∞1=%v, –∫–Ω–æ–ø–∫–∞2=%v, –∫–Ω–æ–ø–∫–∞3=%v, –∫–Ω–æ–ø–∫–∞4=%v, –∫–Ω–æ–ø–∫–∞5=%v, –∫–Ω–æ–ø–∫–∞6=%v, —Å–∫—Ä–æ–ª–ª=%v",
		pageStatus.Buttons.Button1Active,
		pageStatus.Buttons.Button2Active,
		pageStatus.Buttons.Button3Active,
		pageStatus.Buttons.Button4Active,
		pageStatus.Buttons.Button5Active,
		pageStatus.Buttons.Button6Active,
		pageStatus.HasScroll)

	// –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	if !pageStatus.HasScroll {
		finalImg = img
	}

	// –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª –µ—Å—Ç—å, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—É—Å–æ—á–∫–∞–º
	if pageStatus.HasScroll {
		// —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—É—Å–æ—á–∫–∞–º
		img, err := screenshotManager.PerformScreenshotWithScroll(pageStatus, c)
		if err != nil {
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º")
			return nil, "", err
		}
		finalImg = img
	}

	buttonExist := pageStatus.Buttons.Button1Active || pageStatus.Buttons.Button2Active || pageStatus.Buttons.Button3Active || pageStatus.Buttons.Button4Active || pageStatus.Buttons.Button5Active || pageStatus.Buttons.Button6Active

	// –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é ScreenshotManager
	croppedFinalImg := screenshotManager.CropImageForText(finalImg, c, buttonExist)

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º croppedFinalImg
	savedImagePath, err := screenshotManager.SaveImage(croppedFinalImg, "sreenshot.png", c.SaveAllScreenshots, loggerManager)

	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
	} else {
		loggerManager.Info("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", savedImagePath)
	}

	return croppedFinalImg, savedImagePath, nil
}

// processItemPageWithButtonLogic –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, OCR, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î)
func processItemPageWithButtonLogic(c *config.Config, screenshotManager *screenshot.ScreenshotManager, ocrManager *ocr.OCRManager, dbManager *database.DatabaseManager, loggerManager *logger.LoggerManager, currentItem string, itemCategory string) error {
	// –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageStatus := screenshotManager.GetPageStatus(c)

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–∞
	croppedFinalImg, savedImgPath, err := processItemPage(c, pageStatus, screenshotManager, loggerManager)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
		return err
	}

	// –ø—Ä–æ–≤–æ–¥–∏–º OCR –∫–∞—Ä—Ç–∏–Ω–∫–∏
	result, debugInfo, jsonData, rawText, err := ocrManager.ProcessImage(savedImgPath)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ OCR")
		return err
	}

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
	var imgBytes bytes.Buffer
	png.Encode(&imgBytes, croppedFinalImg)

	loggerManager.Info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ '%s' —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '%s'", currentItem, itemCategory)

	num, err := dbManager.SaveOCRResultToDB(savedImgPath, result, debugInfo, jsonData, rawText, imgBytes.Bytes(), c, itemCategory, currentItem)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É")
		return err
	}
	loggerManager.Info("üîç OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: %d", num)

	return nil
}
