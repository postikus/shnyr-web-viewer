package cycle_all_items

import (
	"bytes"
	"fmt"
	"image"
	"image/png"
	"shnyr/internal/click_manager"
	"shnyr/internal/config"
	"shnyr/internal/database"
	"shnyr/internal/interrupt"
	"shnyr/internal/logger"
	"shnyr/internal/ocr"
	"shnyr/internal/screenshot"
)

var processItemPage = func(c *config.Config,
	pageStatus screenshot.PageStatus,
	screenshotManager *screenshot.ScreenshotManager,
	loggerManager *logger.LoggerManager) (image.Image, string, error) {

	var finalImg image.Image
	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
	img := screenshotManager.CaptureScreenShot()

	// –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –ª–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	loggerManager.Info("üìÑ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –∫–Ω–æ–ø–∫–∞1=%v, –∫–Ω–æ–ø–∫–∞2=%v, –∫–Ω–æ–ø–∫–∞3=%v, –∫–Ω–æ–ø–∫–∞4=%v, —Å–∫—Ä–æ–ª–ª=%v",
		pageStatus.Buttons.Button1Active,
		pageStatus.Buttons.Button2Active,
		pageStatus.Buttons.Button3Active,
		pageStatus.Buttons.Button4Active,
		pageStatus.HasScroll)

	// –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
	if !pageStatus.HasScroll {
		finalImg = img
	}

	// –µ—Å–ª–∏ —Å–∫—Ä–æ–ª–ª –µ—Å—Ç—å, —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—É—Å–æ—á–∫–∞–º
	if pageStatus.HasScroll {
		// —Å–æ–±–∏—Ä–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—É—Å–æ—á–∫–∞–º
		img, err := screenshotManager.PerformScreenshotWithScroll(pageStatus, c)
		if err != nil {
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º")
			return nil, "", err
		}
		finalImg = img
	}

	buttonExist := pageStatus.Buttons.Button1Active || pageStatus.Buttons.Button2Active || pageStatus.Buttons.Button3Active || pageStatus.Buttons.Button4Active
	// –æ–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é ScreenshotManager
	croppedFinalImg := screenshotManager.CropImageForText(finalImg, c, buttonExist)

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º croppedFinalImg
	savedImagePath, err := screenshotManager.SaveImage(croppedFinalImg, "sreenshot.png", c.SaveAllScreenshots, loggerManager)

	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
	} else {
		loggerManager.Info("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s", savedImagePath)
	}

	return croppedFinalImg, savedImagePath, nil
}

// processButtonPage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, OCR, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î)
func processItemPageWithButtonLogic(c *config.Config, screenshotManager *screenshot.ScreenshotManager, ocrManager *ocr.OCRManager, dbManager *database.DatabaseManager, loggerManager *logger.LoggerManager) error {
	// –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageStatus := screenshotManager.GetPageStatus(c)

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–∞
	croppedFinalImg, savedImgPath, err := processItemPage(c, pageStatus, screenshotManager, loggerManager)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
		return err
	}

	// –ø—Ä–æ–≤–æ–¥–∏–º OCR –∫–∞—Ä—Ç–∏–Ω–∫–∏
	result, debugInfo, jsonData, rawText, err := ocrManager.ProcessImage(savedImgPath)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ OCR")
		return err
	}

	// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É
	var imgBytes bytes.Buffer
	png.Encode(&imgBytes, croppedFinalImg)
	num, err := dbManager.SaveOCRResultToDB(savedImgPath, result, debugInfo, jsonData, rawText, imgBytes.Bytes(), c)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É")
		return err
	}
	loggerManager.Info("üîç OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: %d", num)

	return nil
}

// processItem –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å–æ –≤—Å–µ–º–∏ –µ–≥–æ –∫–Ω–æ–ø–∫–∞–º–∏
func processItemListPage(c *config.Config, screenshotManager *screenshot.ScreenshotManager, ocrManager *ocr.OCRManager, dbManager *database.DatabaseManager, clickManager *click_manager.ClickManager, loggerManager *logger.LoggerManager, interruptManager *interrupt.InterruptManager) error {
	itemCoordinates, err := screenshotManager.GetItemListItemsCoordinates()
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
		return err
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
	for _, coordinate := range itemCoordinates {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
		select {
		case <-interruptManager.GetScriptInterruptChan():
			loggerManager.Info("‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ script1 –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			return fmt.Errorf("–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		default:
		}

		loggerManager.Info("üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: %v", coordinate)

		// –∫–ª–∏–∫–∞–µ–º –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
		clickManager.ClickCoordinates(coordinate)

		// –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		pageStatus := screenshotManager.GetPageStatus(c)

		// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞
		err := processItemPageWithButtonLogic(c, screenshotManager, ocrManager, dbManager, loggerManager)
		if err != nil {
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
			return err
		}

		if pageStatus.Buttons.Button2Active {
			// –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ 2
			clickManager.ClickCoordinates(image.Point{X: c.Click.Button2.X, Y: c.Click.Button2.Y})

			// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–æ–ø–∫–∏ 2
			err = processItemPageWithButtonLogic(c, screenshotManager, ocrManager, dbManager, loggerManager)
			if err != nil {
				loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ 2")
				return err
			}
		}

		// –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∫ –æ–Ω –º–æ–≥ —É—Å—Ç–∞—Ä–µ—Ç—å
		pageStatus = screenshotManager.GetPageStatus(c)
		if pageStatus.Buttons.Button3Active {
			// –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ 3
			clickManager.ClickCoordinates(image.Point{X: c.Click.Button3.X, Y: c.Click.Button3.Y})

			// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–æ–ø–∫–∏ 3
			err = processItemPageWithButtonLogic(c, screenshotManager, ocrManager, dbManager, loggerManager)
			if err != nil {
				loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ 3")
				return err
			}
		}

		// –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∫ –æ–Ω –º–æ–≥ —É—Å—Ç–∞—Ä–µ—Ç—å
		pageStatus = screenshotManager.GetPageStatus(c)
		if pageStatus.Buttons.Button4Active {
			// –∫–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ 4
			clickManager.ClickCoordinates(image.Point{X: c.Click.Button4.X, Y: c.Click.Button4.Y})

			// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–æ–ø–∫–∏ 4
			err = processItemPageWithButtonLogic(c, screenshotManager, ocrManager, dbManager, loggerManager)
			if err != nil {
				loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ 4")
				return err
			}
		}

		// –∫–ª–∏–∫–∞–µ–º –ø–æ back
		clickManager.ClickCoordinates(image.Point{X: c.Click.Back.X, Y: c.Click.Back.Y})
	}
	return nil
}

var Run = func(c *config.Config, screenshotManager *screenshot.ScreenshotManager, dbManager *database.DatabaseManager, ocrManager *ocr.OCRManager, clickManager *click_manager.ClickManager, loggerManager *logger.LoggerManager, interruptManager *interrupt.InterruptManager) {
	// –±–µ—Ä–µ–º –æ–∫–Ω–æ L2 –≤ —Ñ–æ–∫—É—Å
	clickManager.FocusL2Window()

	// —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ—Ö–æ–¥–æ–≤ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π max_cycles_items_list
	for cycles := 0; cycles < c.MaxCyclesItemsList; cycles++ {
		loggerManager.Info("üîÑ –ü—Ä–æ—Ö–æ–¥ %d –∏–∑ %d", cycles+1, c.MaxCyclesItemsList)

		select {
		case <-interruptManager.GetScriptInterruptChan():
			loggerManager.Info("‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ script1 –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
			return
		default:
		}

		// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		err := processItemListPage(c, screenshotManager, ocrManager, dbManager, clickManager, loggerManager, interruptManager)
		if err != nil {
			if err.Error() == "–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" {
				loggerManager.Info("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é")
				return
			}
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
		}

		// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ü–∏–∫–ª–µ
		buttonIndex := 2
		for buttonIndex <= 6 {
			var buttonX, buttonY int
			switch buttonIndex {
			case 2:
				buttonX, buttonY = c.Click.Button2.X, c.Click.Button2.Y
			case 3:
				buttonX, buttonY = c.Click.Button3.X, c.Click.Button3.Y
			case 4:
				buttonX, buttonY = c.Click.Button4.X, c.Click.Button4.Y
			case 5:
				buttonX, buttonY = c.Click.Button5.X, c.Click.Button5.Y
			case 6:
				buttonX, buttonY = c.Click.Button6.X, c.Click.Button6.Y
			}

			if screenshotManager.CheckButtonActiveByPixel(buttonX, 35) {
				loggerManager.Info("üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É %d", buttonIndex)
				clickManager.ClickCoordinates(image.Point{X: buttonX, Y: buttonY})
				err = processItemListPage(c, screenshotManager, ocrManager, dbManager, clickManager, loggerManager, interruptManager)
				if err != nil {
					if err.Error() == "–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" {
						loggerManager.Info("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é")
						return
					}
					loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
				}

				// –î–ª—è –∫–Ω–æ–ø–∫–∏ 6 –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–∂–∏–º–∞—Ç—å –ø–æ–∫–∞ –æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞
				if buttonIndex == 6 {
					for screenshotManager.CheckButtonActiveByPixel(buttonX, 35) {
						loggerManager.Info("üîò –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É 6")
						clickManager.ClickCoordinates(image.Point{X: buttonX, Y: buttonY})
						err = processItemListPage(c, screenshotManager, ocrManager, dbManager, clickManager, loggerManager, interruptManager)
						if err != nil {
							if err.Error() == "–ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" {
								loggerManager.Info("‚èπÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—é")
								return
							}
							loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
						}
					}
					loggerManager.Info("üîç –ö–Ω–æ–ø–∫–∞ 6 –±–æ–ª—å—à–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
					break
				}
			} else {
				loggerManager.Info("üîç –ö–Ω–æ–ø–∫–∞ %d –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É", buttonIndex)
				break
			}
			buttonIndex++
		}

		loggerManager.Info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ %d –∏–∑ %d", cycles+1, c.MaxCyclesItemsList)
	}
}
