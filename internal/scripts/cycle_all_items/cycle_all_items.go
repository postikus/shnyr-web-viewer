package cycle_all_items

import (
	"image"
	"shnyr/internal/click_manager"
	"shnyr/internal/config"
	"shnyr/internal/database"
	imageInternal "shnyr/internal/image"
	"shnyr/internal/interrupt"
	"shnyr/internal/logger"
	"shnyr/internal/ocr"
	"shnyr/internal/screenshot"
)

// clickPageButton –∫–ª–∏–∫–∞–µ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ
func clickPageButton(c *config.Config, clickManager *click_manager.ClickManager, dbManager *database.DatabaseManager, buttonName string, buttonCoords image.Point, isActive bool, marginX, marginY int, loggerManager *logger.LoggerManager) {
	if isActive {
		loggerManager.Info("üîò –ö–ª–∏–∫–∞–µ–º –ø–æ %s...", buttonName)
		clickManager.ClickCoordinates(buttonCoords, marginX, marginY)
	} else {
		loggerManager.Info("‚è≠Ô∏è %s –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", buttonName)
	}
}

// getScreenshotOfItemPage –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–µ–¥–º–µ—Ç–∞
func getScreenshotOfItemPage(c *config.Config, clickManager *click_manager.ClickManager, screenshotManager *screenshot.ScreenshotManager, buttonStatus screenshot.ButtonStatus, hasScroll bool, marginX, marginY int, loggerManager *logger.LoggerManager) (image.Image, error) {
	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫—Ä–æ–ª–ª–∞, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
	if !hasScroll {
		loggerManager.Info("‚ùå –°–∫—Ä–æ–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç")
		return screenshotManager.CaptureScreenShot(), nil
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∏ OCR (–±–µ–∑ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
	loggerManager.Info("üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Ü–∏–∫–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º...")
	if buttonStatus.Button2Active {
		img, _, err := clickManager.PerformScreenshotWithScroll(true)
		if err != nil {
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º")
			return img, err
		}
		return img, nil
	} else {
		img, _, err := clickManager.PerformScreenshotWithScroll(false)
		if err != nil {
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —Å–æ —Å–∫—Ä–æ–ª–ª–æ–º")
			return img, err
		}
		return img, nil
	}
}

// processItemPages –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç (–∫–ª–∏–∫, –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–æ–ª–ª–∞, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤)
func processItemPages(c *config.Config, clickManager *click_manager.ClickManager, screenshotManager *screenshot.ScreenshotManager, dbManager *database.DatabaseManager, ocrManager *ocr.OCRManager, point image.Point, marginX, marginY int, loggerManager *logger.LoggerManager) {

	img := screenshotManager.CaptureScreenShot()

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	pageStatus := screenshotManager.GetPageStatus(img, c, marginX, marginY)
	loggerManager.Debug("scrollRPx: %v", pageStatus.HasScroll)

	// –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –ª–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	loggerManager.Info("üìÑ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –∫–Ω–æ–ø–∫–∞2=%v, –∫–Ω–æ–ø–∫–∞3=%v, –∫–Ω–æ–ø–∫–∞4=%v, –∫–Ω–æ–ø–∫–∞5=%v, –∫–Ω–æ–ø–∫–∞6=%v, —Å–∫—Ä–æ–ª–ª=%v",
		pageStatus.Buttons.Button2Active,
		pageStatus.Buttons.Button3Active,
		pageStatus.Buttons.Button4Active,
		pageStatus.Buttons.Button5Active,
		pageStatus.Buttons.Button6Active,
		pageStatus.HasScroll)

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–º–µ—Ç–∞
	itemPageImg, err := getScreenshotOfItemPage(c, clickManager, screenshotManager, pageStatus.Buttons, pageStatus.HasScroll, marginX, marginY, loggerManager)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
		return
	}

	result, debugInfo, jsonData, rawText, err := ocrManager.ProcessImage(itemPageImg, "itemPageImg")
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ OCR")
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	imageBytes, err := imageInternal.ImageToBytes(itemPageImg)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
		return
	}

	_, err = dbManager.SaveOCRResultToDB("itemPageImg", result, debugInfo, jsonData, rawText, imageBytes, c)
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
	}

	// –ö–ª–∏–∫–∞–µ–º Back —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–Ω–æ–ø–∫–∏
	loggerManager.Info("üîô –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ Back...")
	clickManager.ClickCoordinates(image.Point{X: c.Click.Back.X, Y: c.Click.Back.Y}, marginX, marginY)
	loggerManager.Info("‚úÖ Back –∫–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
}

var Run = func(c *config.Config, screenshotManager *screenshot.ScreenshotManager, dbManager *database.DatabaseManager, ocrManager *ocr.OCRManager, clickManager *click_manager.ClickManager, marginX, marginY int, loggerManager *logger.LoggerManager, interruptManager *interrupt.InterruptManager) {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤
	windowInitializer := imageInternal.NewWindowInitializer(c.WindowTopOffset)
	marginX, marginY, err := windowInitializer.GetItemBrokerWindowMargins()
	if err != nil {
		loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–∫–Ω–∞")
	}

	// –±–µ—Ä–µ–º –æ–∫–Ω–æ L2 –≤ —Ñ–æ–∫—É—Å
	clickManager.FocusL2Window()

	// —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–Ω—ã—Ö –ø—Ä–æ—Ö–æ–¥–æ–≤ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π max_cycles_items_list
	for cycles := 0; cycles < c.MaxCyclesItemsList; cycles++ {
		loggerManager.Info("üîÑ –ü—Ä–æ—Ö–æ–¥ %d –∏–∑ %d", cycles+1, c.MaxCyclesItemsList)

		// –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
		// –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
		itemCoordinates, err := screenshotManager.GetItemListItemsCoordinates()
		if err != nil {
			loggerManager.LogError(err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
		for _, coordinate := range itemCoordinates {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
			select {
			case <-interruptManager.GetScriptInterruptChan():
				loggerManager.Info("‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ cycle_all_items –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
				return
			default:
			}

			loggerManager.Info("üìç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö: %v", coordinate)

			// –∫–ª–∏–∫–∞–µ–º –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
			clickManager.ClickCoordinates(coordinate, marginX, marginY)

			// —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∫–Ω–æ –ø–æ–∫—É–ø–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
			img := screenshotManager.CaptureScreenShot()

			// –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			pageStatus := screenshotManager.GetPageStatus(img, c, marginX, marginY)

			// –≤—ã–≤–æ–¥–∏–º –æ–±—â–∏–π –ª–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
			loggerManager.Info("üìÑ –°—Ç–∞—Ç—É—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –∫–Ω–æ–ø–∫–∞2=%v, –∫–Ω–æ–ø–∫–∞3=%v, –∫–Ω–æ–ø–∫–∞4=%v, –∫–Ω–æ–ø–∫–∞5=%v, –∫–Ω–æ–ø–∫–∞6=%v, —Å–∫—Ä–æ–ª–ª=%v",
				pageStatus.Buttons.Button2Active,
				pageStatus.Buttons.Button3Active,
				pageStatus.Buttons.Button4Active,
				pageStatus.Buttons.Button5Active,
				pageStatus.Buttons.Button6Active,
				pageStatus.HasScroll)

			// processItemPages(c, clickManager, screenshotManager, dbManager, ocrManager, coordinate, marginX, marginY, loggerManager)

			// –∫–ª–∏–∫–∞–µ–º –ø–æ back
			clickManager.ClickCoordinates(image.Point{X: c.Click.Back.X, Y: c.Click.Back.Y}, marginX, marginY)
		}

		loggerManager.Info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ %d –∏–∑ %d", cycles+1, c.MaxCyclesItemsList)
	}
}
