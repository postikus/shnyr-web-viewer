package ocr

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"os/exec"
	"regexp"
	"strings"
)

// StructuredItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –∏–∑ structured_data
type StructuredItem struct {
	Title       string `json:"title"`
	TitleShort  string `json:"title_short"`
	Enhancement string `json:"enhancement"`
	Price       string `json:"price"`
	Package     bool   `json:"package"`
	Owner       string `json:"owner"`
}

// OCRJSONResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –æ—Ç–≤–µ—Ç–∞
type OCRJSONResult struct {
	ImageFile  string `json:"image_file"`
	Processing struct {
		Enlargement         string `json:"enlargement"`
		Grayscale           bool   `json:"grayscale"`
		Denoising           string `json:"denoising"`
		ContrastEnhancement string `json:"contrast_enhancement"`
		Binarization        string `json:"binarization"`
		OCREngine           string `json:"ocr_engine"`
		OCRLanguages        string `json:"ocr_languages"`
		OCRMode             string `json:"ocr_mode"`
	} `json:"processing"`
	TextRecognition struct {
		Success        bool             `json:"success"`
		RawText        string           `json:"raw_text"`
		StructuredData []StructuredItem `json:"structured_data"`
		Confidence     string           `json:"confidence"`
	} `json:"text_recognition"`
}

// RunOCR –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–π cpp_ocr.exe –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
func RunOCR(imagePath string) (string, error) {
	ocrExecutable := `C:\Users\karpo\cpp_ocr\build\Release\cpp_ocr.exe`
	cmd := exec.Command(ocrExecutable, imagePath)
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ OCR: %v, –≤—ã–≤–æ–¥: %s", err, string(output))
	}
	return string(output), nil
}

// fixMalformedJSON –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç JSON —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–ø—è—Ç—ã–º–∏ –≤ –º–∞—Å—Å–∏–≤–µ structured_data
func fixMalformedJSON(jsonData string) string {
	// –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: } { –≤ –º–∞—Å—Å–∏–≤–µ structured_data
	// –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø—è—Ç—É—é –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
	pattern := regexp.MustCompile(`(\s*}\s*)(\s*{\s*"title":)`)
	replacement := `$1,$2`

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—É
	fixedJSON := pattern.ReplaceAllString(jsonData, replacement)

	return fixedJSON
}

// ParseOCRResult –ø–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, JSON –∏ raw_text
func ParseOCRResult(ocrResult string) (debugInfo, jsonData, rawText string) {
	// –ò—â–µ–º –º–∞—Ä–∫–µ—Ä—ã JSON
	jsonStart := "=== JSON START ==="
	jsonEnd := "=== JSON END ==="

	startIndex := strings.Index(ocrResult, jsonStart)
	endIndex := strings.Index(ocrResult, jsonEnd)

	if startIndex != -1 && endIndex != -1 && endIndex > startIndex {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤—Å—ë –¥–æ JSON)
		debugInfo = strings.TrimSpace(ocrResult[:startIndex])

		// –ò–∑–≤–ª–µ–∫–∞–µ–º JSON (–º–µ–∂–¥—É –º–∞—Ä–∫–µ—Ä–∞–º–∏)
		jsonStartPos := startIndex + len(jsonStart)
		jsonData = strings.TrimSpace(ocrResult[jsonStartPos:endIndex])

		// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º malformed JSON
		jsonData = fixMalformedJSON(jsonData)

		// –ò–∑–≤–ª–µ–∫–∞–µ–º raw_text –∏–∑ JSON
		var ocrResult OCRJSONResult
		if err := json.Unmarshal([]byte(jsonData), &ocrResult); err == nil {
			rawText = ocrResult.TextRecognition.RawText
		}
	} else {
		// –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –≤—ã–≤–æ–¥–µ
		// –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON (–ø–µ—Ä–≤–∞—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞)
		jsonStartPos := strings.Index(ocrResult, "{")
		if jsonStartPos != -1 {
			// –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON (–ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞)
			jsonEndPos := strings.LastIndex(ocrResult, "}")
			if jsonEndPos != -1 && jsonEndPos > jsonStartPos {
				// –ò–∑–≤–ª–µ–∫–∞–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–≤—Å—ë –¥–æ JSON)
				debugInfo = strings.TrimSpace(ocrResult[:jsonStartPos])

				// –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
				jsonData = strings.TrimSpace(ocrResult[jsonStartPos : jsonEndPos+1])

				// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º malformed JSON
				jsonData = fixMalformedJSON(jsonData)

				// –ò–∑–≤–ª–µ–∫–∞–µ–º raw_text –∏–∑ JSON
				var ocrResult OCRJSONResult
				if err := json.Unmarshal([]byte(jsonData), &ocrResult); err == nil {
					rawText = ocrResult.TextRecognition.RawText
				} else {
					fmt.Printf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤: %v\n", err)
					fmt.Printf("JSON –¥–∞–Ω–Ω—ã–µ: %s\n", jsonData)
				}
			} else {
				// –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ JSON, –≤—Å—ë —Å—á–∏—Ç–∞–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
				debugInfo = ocrResult
				jsonData = ""
				rawText = ""
			}
		} else {
			// –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ JSON, –≤—Å—ë —Å—á–∏—Ç–∞–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
			debugInfo = ocrResult
			jsonData = ""
			rawText = ""
		}
	}

	return debugInfo, jsonData, rawText
}

// SaveStructuredData —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func SaveStructuredData(db *sql.DB, ocrResultID int, jsonData string) error {
	if jsonData == "" {
		return nil // –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	}

	// –ü–∞—Ä—Å–∏–º JSON
	var ocrResult OCRJSONResult
	err := json.Unmarshal([]byte(jsonData), &ocrResult)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	createTableSQL := `CREATE TABLE IF NOT EXISTS structured_items (
		id INT AUTO_INCREMENT PRIMARY KEY,
		ocr_result_id INT,
		title VARCHAR(255) NOT NULL,
		title_short VARCHAR(255),
		enhancement VARCHAR(10),
		price VARCHAR(50) NOT NULL,
		package BOOLEAN DEFAULT FALSE,
		owner VARCHAR(255),
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (ocr_result_id) REFERENCES ocr_results(id) ON DELETE CASCADE
	)`

	_, err = db.Exec(createTableSQL)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã structured_items: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
	for _, item := range ocrResult.TextRecognition.StructuredData {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "0" –¥–ª—è –ø—É—Å—Ç–æ–≥–æ enhancement
		enhancement := item.Enhancement
		if enhancement == "" {
			enhancement = "0"
			fmt.Printf("üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω enhancement='0' –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: %s\n", item.Title)
		}

		insertSQL := `INSERT INTO structured_items (ocr_result_id, title, title_short, enhancement, price, package, owner) VALUES (?, ?, ?, ?, ?, ?, ?)`
		_, err = db.Exec(insertSQL, ocrResultID, item.Title, item.TitleShort, enhancement, item.Price, item.Package, item.Owner)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
	}

	fmt.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ID: %d\n",
		len(ocrResult.TextRecognition.StructuredData), ocrResultID)
	return nil
}
