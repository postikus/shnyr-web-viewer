package screenshot

import (
	"bytes"
	"database/sql"
	"fmt"
	"image"
	"image/png"
	"log"
	"octopus/internal/config"
	"os"
	"time"

	"octopus/internal/ocr"

	"github.com/kbinani/screenshot"
)

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
var db *sql.DB

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
var saveScreenshotsLocally bool

// SetDatabase —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func SetDatabase(database *sql.DB) {
	db = database
}

// SetSaveScreenshotsLocally —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–ª–∞–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ
func SetSaveScreenshotsLocally(save bool) {
	saveScreenshotsLocally = save
}

// ShouldSaveLocally –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
func ShouldSaveLocally() bool {
	return saveScreenshotsLocally
}

// CaptureScreenshot –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
func CaptureScreenshot(c config.CoordinatesWithSize) (image.Image, error) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
	bounds := image.Rect(c.X, c.Y, c.X+c.Width, c.Y+c.Height)

	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤ –ø–∞–º—è—Ç—å
	img, err := screenshot.CaptureRect(bounds)
	if err != nil {
		return nil, fmt.Errorf("failed to capture screenshot: %v", err)
	}

	return img, nil
}

// CaptureFullScreen –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
func CaptureFullScreen() (image.Image, error) {
	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤–µ—Å—å —ç–∫—Ä–∞–Ω
	img, err := screenshot.CaptureRect(image.Rect(0, 0, 1920, 1080)) // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å
	if err != nil {
		return nil, fmt.Errorf("failed to capture full screen: %v", err)
	}
	return img, nil
}

func SaveScreenshot(c config.CoordinatesWithSize, cfg *config.Config) (image.Image, error) {
	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
	img, err := CaptureScreenshot(config.CoordinatesWithSize{X: c.X, Y: c.Y, Width: c.Width, Height: c.Height})
	if err != nil {
		log.Println("Error taking screenshot:", err)
		return nil, err
	}

	// --- –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ---
	// 40 –ø–∏–∫—Å–µ–ª–µ–π —Å–ª–µ–≤–∞, 22 –ø–∏–∫—Å–µ–ª—è —Å–≤–µ—Ä—Ö—É, 17 –ø–∏–∫—Å–µ–ª–µ–π —Å–ø—Ä–∞–≤–∞
	bounds := img.Bounds()
	cropRect := image.Rect(40, 22, bounds.Dx()-17, bounds.Dy())
	croppedImg := img.(interface {
		SubImage(r image.Rectangle) image.Image
	}).SubImage(cropRect)
	// --- –ö–æ–Ω–µ—Ü –ª–æ–≥–∏–∫–∏ –∫–∞–¥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ---

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è –ë–î
	outputFile := fmt.Sprintf("screenshot_%d.png", time.Now().Unix())

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥
	if saveScreenshotsLocally {
		// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
		if err := os.MkdirAll("data", 0755); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ data: %v", err)
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
			localFilePath := fmt.Sprintf("data/%s", outputFile)
			file, err := os.Create(localFilePath)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: %v", err)
			} else {
				defer file.Close()
				err = png.Encode(file, croppedImg)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
				} else {
					log.Printf("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: %s", localFilePath)
				}
			}
		}
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è OCR
	tempFile, err := os.CreateTemp("", "screenshot_*.png")
	if err != nil {
		log.Println("Error creating temp file:", err)
		return nil, err
	}
	defer func() {
		tempFile.Close()
		os.Remove(tempFile.Name()) // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	}()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	err = png.Encode(tempFile, croppedImg)
	if err != nil {
		log.Println("Error saving temp image:", err)
		return nil, err
	}

	// –í—ã–∑—ã–≤–∞–µ–º OCR —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
	ocrResult, err := ocr.RunOCR(tempFile.Name())
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ OCR: %v", err)
	} else {
		fmt.Printf("OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n%s\n", ocrResult)

		// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR
		debugInfo, jsonData, rawText := ocr.ParseOCRResult(ocrResult)

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
		imageBytes, err := imageToBytes(croppedImg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
		} else {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			_, err = saveOCRResultToDB(outputFile, ocrResult, debugInfo, jsonData, rawText, imageBytes, cfg)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: %v", err)
			}
		}
	}

	return croppedImg, nil
}

var SaveItemOffersWithoutButtondScreenshot = func(c *config.Config) {
	SaveScreenshot(c.Screenshot.ItemOffersListWithoutButtons, c)
}

// SaveScreenshotFull –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ –∫—Ä–∞—ë–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
func SaveScreenshotFull(c config.CoordinatesWithSize) (image.Image, error) {
	// –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
	img, err := CaptureScreenshot(config.CoordinatesWithSize{X: c.X, Y: c.Y, Width: c.Width, Height: c.Height})
	if err != nil {
		log.Println("Error taking screenshot:", err)
		return nil, err
	}

	fmt.Println("Full screenshot captured (not saved locally)")

	return img, nil
}

// saveOCRResultToDB —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func saveOCRResultToDB(imagePath, ocrResult string, debugInfo, jsonData, rawText string, imageData []byte, cfg *config.Config) (int, error) {
	if db == nil {
		return 0, fmt.Errorf("–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
	if cfg.SaveToDB != 1 {
		log.Printf("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω–æ (save_to_db = %d)", cfg.SaveToDB)
		return 0, nil
	}

	// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS ocr_results (
		id INT AUTO_INCREMENT PRIMARY KEY,
		image_path VARCHAR(255) NOT NULL,
		image_data LONGBLOB,
		ocr_text LONGTEXT,
		debug_info LONGTEXT,
		json_data LONGTEXT,
		raw_text LONGTEXT,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
	)`

	_, err := db.Exec(createTableSQL)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: %v", err)
	}

	// –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç OCR —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	insertSQL := `INSERT INTO ocr_results (image_path, image_data, ocr_text, debug_info, json_data, raw_text) VALUES (?, ?, ?, ?, ?, ?)`
	result, err := db.Exec(insertSQL, imagePath, imageData, ocrResult, debugInfo, jsonData, rawText)
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
	ocrResultID, err := result.LastInsertId()
	if err != nil {
		return 0, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø–∏—Å–∏: %v", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if jsonData != "" {
		err = ocr.SaveStructuredData(db, int(ocrResultID), jsonData)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
	}

	log.Printf("OCR —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–ª–∞: %s (ID: %d)", imagePath, ocrResultID)
	return int(ocrResultID), nil
}

// imageToBytes –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
func imageToBytes(img image.Image) ([]byte, error) {
	var buf bytes.Buffer
	err := png.Encode(&buf, img)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
	}
	return buf.Bytes(), nil
}
